{
  "openapi": "3.0.3",
  "info": {
    "title": "ConnectWise Asio APIs",
    "description": "ConnectWise Asio",
    "version": "1.0"
  },
  "servers": [
    {
      "url": "https://openapi.service.itsupport247.net"
    }
  ],
  "paths": {
    "/api/platform/v1/device-groups": {
      "get": {
        "tags": [
          "Device Groups"
        ],
        "summary": "Fetch all Device Groups",
        "operationId": "Get_details_of_Devices_Groups",
        "security": [
          {
            "device_groups": [
              "platform.deviceGroups.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "DGs are retrieved successfully.",
            "headers": {
              "Access-Control-Allow-Origin": {
                "description": "in:header",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DeviceGroupWithRootBlockInVersionedPayload"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden.",
            "headers": {
              "Access-Control-Allow-Origin": {
                "description": "in:header",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error while request handling.",
            "headers": {
              "Access-Control-Allow-Origin": {
                "description": "in:header",
                "schema": {
                  "type": "string"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        }
      }
    },
    "/api/platform/v1/automation/shellScripts": {
      "get": {
        "tags": [
          "Automation"
        ],
        "summary": "Fetch all Shell Scripts",
        "operationId": "Get_details_of_Shell_Scripts",
        "security": [
          {
            "automation_read": [
              "platform.automation.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned list of all shell scripts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateMetaData"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden user is not entitled to view the templates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorShellScripts"
                }
              }
            }
          },
          "500": {
            "description": "Can not get shell templates",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorShellScripts"
                }
              }
            }
          }
        }
      }
    },
    "/api/platform/v1/automation/scripts": {
      "get": {
        "tags": [
          "Automation"
        ],
        "summary": "Fetch all Scripts",
        "operationId": "Get_details_of_Scripts",
        "security": [
          {
            "automation_read": [
              "platform.automation.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Scripts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Scripts"
                }
              }
            }
          },
          "400": {
            "description": "Request Processing / validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorScripts"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorScripts"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorScripts"
                }
              }
            }
          },
          "404": {
            "description": "Scripts not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorScripts"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorScripts"
                }
              }
            }
          }
        }
      }
    },
    "/api/platform/v1/automation/tasks": {
      "get": {
        "tags": [
          "Automation"
        ],
        "summary": "Fetch all Tasks",
        "operationId": "Get_details_of_Tasks",
        "security": [
          {
            "automation_read": [
              "platform.automation.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the list of TasksDefinitions by partner ID",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TaskDefinitionDetails"
                  }
                }
              }
            }
          },
          "401": {
            "description": "In-valid bearer Token",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorInvalidTasks"
                }
              }
            }
          },
          "403": {
            "description": "In-valid Permission Vector OR JWTToken",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorForbiddenTasks"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTasks"
                }
              }
            }
          }
        }
      }
    },
    "/v1/token": {
      "post": {
        "tags": [
          "Authorization"
        ],
        "summary": "Authorize with credentials",
        "operationId": "Authorize_with_credentials",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "grant_type": {
                    "type": "string"
                  },
                  "client_id": {
                    "type": "string"
                  },
                  "client_secret": {
                    "type": "string"
                  },
                  "scope": {
                    "type": "string"
                  }
                },
                "example": {
                  "grant_type": "client_credentials",
                  "client_id": "6500023",
                  "client_secret": "some_client_secret",
                  "scope": "platform.companies.read"
                }
              }
            }
          },
          "required": false
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "access_token": "o7-0jLHntmSEfkr5KGq2whqRfR0",
                  "scope": "platform.companies.read",
                  "token_type": "Bearer",
                  "expires_in": 3599
                }
              }
            }
          }
        },
        "x-codegen-request-body-name": "body"
      }
    },
    "/v1/rate_limits": {
      "get": {
        "tags": [
          "Rate Limits"
        ],
        "summary": "Get current rate limit",
        "operationId": "Get_current_rate_limit",
        "security": [
          {
            "openapi_oauth": []
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "example": {
                  "resources": {
                    "alerts": {
                      "create-alert": {
                        "limit": 35,
                        "remaining": 34,
                        "reset": 1603785300
                      }
                    },
                    "asset": {
                      "partner-asset-endpoints-details": {
                        "limit": 35,
                        "remaining": 35,
                        "reset": 1603785300
                      }
                    },
                    "service": {
                      "rate-limit": {
                        "limit": 35,
                        "remaining": 33,
                        "reset": 1603785300
                      }
                    },
                    "topology": {
                      "partner-topology-clients": {
                        "limit": 35,
                        "remaining": 35,
                        "reset": 1603785300
                      },
                      "partner-topology-endpoints": {
                        "limit": 35,
                        "remaining": 35,
                        "reset": 1603785300
                      },
                      "partner-topology-sites": {
                        "limit": 35,
                        "remaining": 35,
                        "reset": 1603785300
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api/platform/v1/company/companies": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get list for companies",
        "operationId": "Get_list_for_companies",
        "security": [
          {
            "platform": [
              "platform.companies.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Companies"
                }
              }
            }
          }
        }
      }
    },
    "/api/platform/v1/company/companies/{companyId}": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get a company by id",
        "operationId": "Get_a_company_by_id",
        "security": [
          {
            "platform": [
              "platform.companies.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "company id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Company"
                }
              }
            }
          }
        }
      }
    },
    "/api/platform/v1/company/companies/{companyId}/sites": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get all sites for the company",
        "operationId": "Get_all_sites_for_the_company",
        "security": [
          {
            "platform": [
              "platform.sites.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "company id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sites"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Company"
        ],
        "summary": "Create a site for the company",
        "operationId": "Create_a_site_for_the_company",
        "security": [
          {
            "platform": [
              "platform.sites.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "company id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SiteCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          }
        }
      }
    },
    "/api/platform/v1/company/companies/{companyId}/sites/{siteId}": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get site by id for company",
        "operationId": "Get_site_by_id_for_company",
        "security": [
          {
            "platform": [
              "platform.sites.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "company id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "site id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Company"
        ],
        "summary": "Update site by id for company",
        "operationId": "Update_site_by_id_for_company",
        "security": [
          {
            "platform": [
              "platform.sites.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "company id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "site id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Site"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Company"
        ],
        "summary": "Update site by id for company",
        "operationId": "Update_site_by_id_for_company_2",
        "security": [
          {
            "platform": [
              "platform.sites.write"
            ]
          }
        ],
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "description": "company id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "siteId",
            "in": "path",
            "description": "site id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchOperations"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          }
        }
      }
    },
    "/api/platform/v1/company/sites": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get list for sites",
        "operationId": "Get_list_for_sites",
        "security": [
          {
            "platform": [
              "platform.sites.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sites"
                }
              }
            }
          }
        }
      }
    },
    "/api/platform/v1/company/sites/{siteId}": {
      "get": {
        "tags": [
          "Company"
        ],
        "summary": "Get site by id",
        "operationId": "Get_site_by_id",
        "security": [
          {
            "platform": [
              "platform.sites.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "siteId",
            "in": "path",
            "description": "site id",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Site"
                }
              }
            }
          }
        }
      }
    },
    "/api/platform/v1/device/endpoints": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get details of Devices for a partner",
        "operationId": "Get_details_of_Devices_for_a_partner",
        "security": [
          {
            "endpoints_list": [
              "platform.asset.read"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved details of Devices successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/endpointList"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/platform/v1/device/clients/{clientID}/endpoints": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get details of Devices for a specific company",
        "operationId": "Get_details_of_Devices_for_a_specific_company",
        "security": [
          {
            "endpoints_list": [
              "platform.asset.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "clientID",
            "in": "path",
            "description": "client ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "436f6d6d-616e-6420-4944-6a200a0a2c75"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved details of Devices successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/endpointList"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/platform/v1/device/clients/{clientID}/sites/{siteID}/endpoints": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get details of Devices for a specific site",
        "operationId": "Get_details_of_Devices_for_a_specific_site",
        "security": [
          {
            "endpoints_list": [
              "platform.asset.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "clientID",
            "in": "path",
            "description": "client ID",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "436f6d6d-616e-6420-4944-6a200a0a2c75"
          },
          {
            "name": "siteID",
            "in": "path",
            "description": "site id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "436f6d6d-616e-6420-4944-6a200a0a2c75"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved details of Devices successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/endpointList"
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/platform/v1/device/endpoints/{endpointID}": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get details of a specific Device",
        "operationId": "Get_details_of_a_specific_Device",
        "security": [
          {
            "endpoints_list": [
              "platform.asset.read"
            ]
          }
        ],
        "parameters": [
          {
            "name": "endpointID",
            "in": "path",
            "description": "endpoint id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "4a9caa07-d45a-4c14-aa36-8c1c26e7a029"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved details of a Device successfully",
            "content": {
              "application/json": {
                "example": {
                  "createTimeUTC": "2023-12-26T17:12:11.994Z",
                  "agentInstalledUTC": "2023-09-05T13:41:39.331Z",
                  "endpointID": "b1bab436-f68c-42d7-b504-d4184327d701",
                  "clientID": "436f6d6d-616e-6420-4944-5a207a0a2c76",
                  "siteID": "436f6d6d-616e-6420-4944-5a207a0a2c76",
                  "friendlyName": "string",
                  "resourceType": "string",
                  "endpointType": "string",
                  "rolesFeatures": "string",
                  "baseBoard": {
                    "product": "string",
                    "manufacturer": "string",
                    "model": "string",
                    "serialNumber": "string",
                    "name": "string",
                    "version": "string",
                    "installDate": "2019-01-16T14:01:12.883Z"
                  },
                  "bios": {
                    "product": "string",
                    "manufacturer": "string",
                    "version": "string",
                    "serialNumber": "string",
                    "smbiosVersion": "string"
                  },
                  "drives": [
                    {
                      "product": "string",
                      "manufacturer": "string",
                      "mediaType": "string",
                      "interfaceType": "string",
                      "logicalName": "string",
                      "serialNumber": "string",
                      "partitions": [
                        "string"
                      ],
                      "sizeBytes": 0,
                      "numberOfPartitions": 0,
                      "partitionData": [
                        {
                          "name": "string",
                          "label": "string",
                          "fileSystem": "string",
                          "description": "string",
                          "sizeBytes": 0
                        }
                      ]
                    }
                  ],
                  "physicalMemory": [
                    {
                      "manufacturer": "string",
                      "serialNumber": "string",
                      "sizeBytes": 0
                    }
                  ],
                  "networks": [
                    {
                      "vendor": "string",
                      "product": "string",
                      "dhcpLeaseDuration": 0,
                      "dhcpEnabled": true,
                      "dhcpServer": "string",
                      "dhcpLeaseObtained": "2019-01-16T14:01:12.884Z",
                      "dhcpLeaseExpires": "2019-01-16T14:01:12.884Z",
                      "dnsServers": [
                        "string"
                      ],
                      "ipEnabled": true,
                      "ipv4": "string",
                      "ipv4List": [
                        "string"
                      ],
                      "ipv6": "string",
                      "ipv6List": [
                        "string"
                      ],
                      "subnetMask": "string",
                      "subnetMasks": [
                        "string"
                      ],
                      "defaultIPGateway": "string",
                      "defaultIPGateways": [
                        "string"
                      ],
                      "macAddress": "string",
                      "winsPrimaryServer": "string",
                      "winsSecondaryServer": "string",
                      "logicalName": "string"
                    }
                  ],
                  "os": {
                    "product": "string",
                    "manufacturer": "string",
                    "osLanguage": "string",
                    "serialNumber": "string",
                    "version": "string",
                    "installDate": "2019-01-16T14:01:12.884Z",
                    "type": "string",
                    "arch": "string",
                    "servicePack": "string",
                    "productId": "string",
                    "productKey": "string"
                  },
                  "processors": [
                    {
                      "product": "string",
                      "numberOfCores": 0,
                      "clockSpeedMhz": "string",
                      "family": 0,
                      "manufacturer": "string",
                      "processorType": "string",
                      "serialNumber": "string",
                      "level": 0
                    }
                  ],
                  "raidController": {
                    "softwareRaid": "string",
                    "hardwareRaid": "string",
                    "vendor": "string"
                  },
                  "system": {
                    "product": "string",
                    "model": "string",
                    "timeZone": "string",
                    "timeZoneDescription": "string",
                    "serialNumber": "string",
                    "systemName": "string",
                    "domain": "string",
                    "domainRole": 0,
                    "category": "string"
                  },
                  "installedSoftwares": [
                    {
                      "name": "string",
                      "version": "string",
                      "publisher": "string",
                      "installDate": "2019-01-16T14:01:12.884Z",
                      "userName": "string",
                      "lastAccessDateTime": "2019-01-16T14:01:12.884Z"
                    }
                  ],
                  "keyboards": [
                    {
                      "deviceID": "string",
                      "name": "string",
                      "description": "string"
                    }
                  ],
                  "mouse": [
                    {
                      "manufacturer": "string",
                      "name": "string",
                      "deviceId": "string",
                      "deviceInterface": 0,
                      "pointingType": 0,
                      "buttons": 0
                    }
                  ],
                  "monitors": [
                    {
                      "deviceID": "string",
                      "name": "string",
                      "manufacturer": "string",
                      "screenHeight": 0,
                      "screenWidth": 0
                    }
                  ],
                  "physicalDrive": [
                    {
                      "type": "string",
                      "partitions": [
                        {
                          "name": "string",
                          "label": "string",
                          "fileSystem": "string",
                          "description": "string",
                          "sizeBytes": 0
                        }
                      ]
                    }
                  ],
                  "users": [
                    {
                      "username": "string",
                      "userType": "string",
                      "userDisabled": true,
                      "userLockout": true,
                      "passwordRequired": true
                    }
                  ],
                  "services": [
                    {
                      "serviceName": "string",
                      "displayName": "string",
                      "executablePath": "string",
                      "startupType": "string",
                      "serviceStatus": "string",
                      "logOnAs": "string",
                      "stopEnableAction": true,
                      "delayedAutoStart": true,
                      "win32ExitCode": 0,
                      "serviceSpecificExitCode": 0
                    }
                  ],
                  "shares": [
                    {
                      "name": "string",
                      "caption": "string",
                      "description": "string",
                      "path": "string",
                      "access": "string",
                      "userAccess": [
                        "string"
                      ],
                      "type": [
                        "string"
                      ]
                    }
                  ],
                  "softwareLicenses": [
                    {
                      "productName": "string",
                      "productId": "string",
                      "productKey": "string"
                    }
                  ]
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/api/platform/v1/service/ticketing/categories": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Returns all ticket categories for a partner",
        "description": "This API returns all the ticket categories for a partner. Pagination support is not available for this API yet, so this API may return large amount of data depending upon categories present for a partner in the system.\n",
        "responses": {
          "200": {
            "description": "Successful response with all available ticket categories for a partner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Categories"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "get__api_platform_v1_service_ticketing_categories"
      }
    },
    "/api/platform/v1/service/ticketing/priorities": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Returns all ticket priorities",
        "description": "This API returns all the available priorities in the system. Pagination support is not available for this API yet, so this API may return large amount of data depending upon priorities present in the system.\n",
        "responses": {
          "200": {
            "description": "Successful response with all available statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Priorities"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "get__api_platform_v1_service_ticketing_priorities"
      }
    },
    "/api/platform/v1/service/ticketing/service-boards": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Returns all service-boards for provided partner, available in the service",
        "description": "This API returns all the available service-boards in the system, for partner with provided partnerId. Pagination support is not available for this API yet, so this API may return large amount of data depending upon serviceBoards present in the system.\n\nThe API accepts query parameters which should be provided to identify available service boards to assigns tickets to. \nAs the CW Expert Service only support entitled companies and sites, providing companyId and siteId allows service to return only entitled service-boards.\n",
        "parameters": [
          {
            "name": "companyId",
            "in": "query",
            "description": "the id of the company of the ticket for which service boards are to be fetched.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "siteId",
            "in": "query",
            "description": "the id of the site of the ticket for which service boards are to be fetched.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "typeId",
            "in": "query",
            "description": "the id of the ticket type which identifies which all service boards are available for ticket of that type to be assgined. If the type is not partner Level, then company and site id should also be provided.",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with all available service-boards",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceBoards"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "get__api_platform_v1_service_ticketing_service_boards"
      }
    },
    "/api/platform/v1/service/ticketing/service-boards/{id}/teams": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Returns all team associations for a service-board",
        "description": "This API fetches all the team associations for a specific service-board.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the service-board for which the team associations API is being called",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with all available team associations for a specific service-board",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceBoardTeams"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "get__api_platform_v1_service_ticketing_service_boards__id__teams"
      }
    },
    "/api/platform/v1/service/ticketing/sources": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Returns all ticket sources for a partner",
        "description": "This API returns all the ticket sources for a partner. Pagination support is not available for this API yet, so this API may return large amount of data depending upon sources present for a partner in the system.\n",
        "responses": {
          "200": {
            "description": "Successful response with all available ticket sources for a partner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Sources"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "get__api_platform_v1_service_ticketing_sources"
      }
    },
    "/api/platform/v1/service/ticketing/statuses": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Returns all ticket statuses",
        "description": "This API returns all the available statuses in the system. Pagination support is not available for this API yet, so this API may return large amount of data depending upon statuses present in the system.\n",
        "responses": {
          "200": {
            "description": "Successful response with all available statuses",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Statuses"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "get__api_platform_v1_service_ticketing_statuses"
      }
    },
    "/api/platform/v1/service/ticketing/tags": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Returns all tags for provided partner, available in the service",
        "description": "This API returns all the available tags in the system, for partner with provided partnerId. Pagination support is not available for this API yet, so this API may return large amount of data depending upon tags present in the system.\n",
        "responses": {
          "200": {
            "description": "Successful response with all available tags",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tags"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "get__api_platform_v1_service_ticketing_tags"
      },
      "post": {
        "tags": [
          "Tickets"
        ],
        "summary": "Creates a new tag",
        "description": "This API creates a new tag in the system. The 'id' parameter value in the request body is ignored, if provided. A new 'id' is created  for the newly created tag and provided in response body\n",
        "requestBody": {
          "description": "thetag object to be created in the system",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Tag creation successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Bad/invalid Request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "post__api_platform_v1_service_ticketing_tags"
      }
    },
    "/api/platform/v1/service/ticketing/tags/{id}": {
      "delete": {
        "tags": [
          "Tickets"
        ],
        "summary": "Deletes a tag",
        "description": "The API deletes the stored tag from system.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the tag to be deleted",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successful response indicating that deletion is successful"
          },
          "404": {
            "description": "the tag with id parameter value provided in path does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "delete__api_platform_v1_service_ticketing_tags__id_"
      },
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Returns a tag",
        "description": "Fetches the tag stored in the system against the provided id.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the tag to be fetched",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with tag in response body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "404": {
            "description": "the tag with id parameter value provided in path does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "get__api_platform_v1_service_ticketing_tags__id_"
      },
      "patch": {
        "tags": [
          "Tickets"
        ],
        "summary": "Updates a tag",
        "description": "This API updates the existing tag based on JSON Patch request received. This API is suitable for changing specific fields of the tag without replacing the entire tag object. For more details on JSON Patch, please check http://jsonpatch.com/ The 'id' parameter value in the request body is ignored, if sent and 'id' parameter value from path is used as tag id for this API\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the tag to be updated",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "the tag object to be updated in the system",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/json-patch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with patched tag in response body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "404": {
            "description": "the tag with id parameter value provided in path does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          },
          "405": {
            "description": "Only replace operation is allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "patch__api_platform_v1_service_ticketing_tags__id_"
      },
      "put": {
        "tags": [
          "Tickets"
        ],
        "summary": "Replace a tag",
        "description": "This API replaces the existing tag matching provided id with the one provided in the request body. All the tag parameter values, except for 'id', are replaced with their correspoding values from request body of this API call. If certain parameter is absent in the request body, it's default value is used, if possible. The 'id' parameter value in the request body is ignored, if sent and 'id' parameter value from path is used as tag id for this API\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the tag to be replaced",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "the tag object to be replaced in the system",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tag"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with updated tag in response body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tag"
                }
              }
            }
          },
          "400": {
            "description": "Bad/invalid Request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          },
          "404": {
            "description": "the tag with id parameter value provided in path does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "put__api_platform_v1_service_ticketing_tags__id_"
      }
    },
    "/api/platform/v1/service/ticketing/ticket-counts": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Returns ticket counts",
        "description": "This API returns ticket counts\n",
        "responses": {
          "200": {
            "description": "Successful response with ticket counts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketCounts"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "get__api_platform_v1_service_ticketing_ticket_counts"
      }
    },
    "/api/platform/v1/service/ticketing/tickets": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Returns selected Service tickets",
        "description": "This API returns selected tickets in the service. Pagination and filtering support is available, see details below.\n\nFor support for Filtering, please note below strategy. \nIn general, you can add as many filter criteria as required by adding those many query parameters. Each query parameter becomes one filter criterion \nand these are ultimately *AND*ed together (tickets matching all criteria are filtered). \nHowever there is a concept of group of criteria. Each filter query parameter supports (as indicated in description of parameter) an optional numeric suffix i.e 1, 2, etc.\nThe query parameters which shares a common suffix become part of same group.\nThis means ?number=123&statusIds=3a8e2efd-5b8a-4911-9824-8d897cf828d3&number1=3445&number2=55666 forms three groups of criteria as below\n\n  - group 1(with no suffix): number = 123 AND statusId = 3a8e2efd-5b8a-4911-9824-8d897cf828d3\n  - group 2(with suffix 1): number = 3445\n  - group 3(with suffix 2): number = 55666\n\nAll the criteria in same group are *AND*ed and then groups themselves are *OR*ed. This allows almost any type of query formation while fitering the tickets.\n",
        "parameters": [
          {
            "name": "pageSize",
            "in": "query",
            "description": "the page size of single page of the paginated records. Must be a positive integer i.e if number is negative, it is ignored. It shall be noted that pageSize must be sent with pageNum (see next). If any one of these two values is not present (but the other is present), error is returned. Also, if value is present but is ignored (due to being invalid), then pageNum is ignored.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "pageNum",
            "in": "query",
            "description": "the page number of paginated record to be fetched. Must be a positive integer i.e if number is negative, it is ignored. It shall be noted that pageNum must be sent with pageSize (see above). If any one of these two values is not present (but the other is present), error is returned. Also, if value is present but is ignored (due to being invalid), then pageSize is ignored. Care should be taken while providing this value so as to not request page with non-existing records, otherwise no records are returned and count of total record returned is also zero.  E.g. if database contains 15 records, then requesting pageSize of 10 and pageNum of 3 would return empty response with total count of records as '0' even though there are 15 records in db. A good idea is to always start with pageNum '1' and use the total records number returned in response to make further calls.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "sortBy",
            "in": "query",
            "description": "the id of field which should be used to sort the result before paginating it. Supported values are 'assignTo', 'number', 'updatedAt', 'createdAt', 'status', 'type', 'priority' , 'summary', 'assignTeam', 'dueDate', 'source' and 'extendedAttributes'. If not present, 'createdAt' is used as default.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sortDir",
            "in": "query",
            "description": "defines if the paginated records are to be sorted ascending or descending. Only two values are supported viz. 'asc' and 'desc'. In case invalid value is sent, 'desc' is used as default",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "number",
            "in": "query",
            "description": "defines search condition by ticket number. For OR filter numeric filter suffix can be added to name. See API description for filtering strategy.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ticketIds",
            "in": "query",
            "description": "defines search condition by list of ticket ids (comma separated). For OR filter numeric filter suffix can be added to name. \nSee API description for filtering strategy.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "summary",
            "in": "query",
            "description": "defines search condition by ticket summary. For OR filter numeric filter suffix can be added to name. \nSee API description for filtering strategy.\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "companyIds",
            "in": "query",
            "description": "in/not in filter, defines search condition by list of company ids (comma separated). \nFor OR filter numeric filter suffix can be added to name. See API description for filtering strategy.\nexamples\nin - \"id1,id2\"\nnot in - \"[notIn],id1,id2\"\n",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "siteIds",
            "in": "query",
            "description": "in/not in filter, defines search condition by list of site ids (comma separated). For OR filter numeric filter suffix can be added to name. See API description for filtering strategy. examples in - \"id1,id2\" not in - \"[notIn],id1,id2\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statusIds",
            "in": "query",
            "description": "in/not in filter, defines search condition by list of status ids (comma separated). For OR filter numeric filter suffix can be added to name. See API description for filtering strategy. examples in - \"id1,id2\" not in - \"[notIn],id1,id2\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "statusNames",
            "in": "query",
            "description": "defines search condition by list of status names (comma separated). For OR filter numeric filter suffix can be added to name. See API description for filtering strategy.examples - \"name1,name2\", not in - \"[notIn],name1,name2\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "priorityIds",
            "in": "query",
            "description": "in/not in filter, defines search condition by list of priority ids (comma separated). For OR filter numeric filter suffix can be added to name. See API description for filtering strategy. examples in - \"id1,id2\" not in - \"[notIn],id1,id2\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "priorityNames",
            "in": "query",
            "description": "defines search condition by list of priority names (comma separated). For OR filter numeric filter suffix can be added to name. See API description for filtering strategy.examples - \"name1,name2\", not in - \"[notIn],name1,name2\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assigneeIds",
            "in": "query",
            "description": "defines search condition by list of assigee ids (comma separated). For OR filter numeric filter suffix can be added to name. See API description for filtering strategy.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assigneeTeamIds",
            "in": "query",
            "description": "in/not in filter, defines search condition by list of assigneeTeam ids (comma separated). For OR filter numeric filter suffix can be added to name. See API description for filtering strategy. examples in - \"id1,id2\" not in - \"[notIn],id1,id2\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "assigneeTeamNames",
            "in": "query",
            "description": "defines search condition by list of assignee team names (comma separated). For OR filter numeric filter suffix can be added to name. See API description for filtering strategy.examples - \"name1,name2\", not in - \"[notIn],name1,name2\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sourceIds",
            "in": "query",
            "description": "defines search condition by list of source ids (comma separated). For OR filter numeric filter suffix can be added to name. See API description for filtering strategy.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "sourceNames",
            "in": "query",
            "description": "defines search condition by list of source names (comma separated). For OR filter numeric filter suffix can be added to name. See API description for filtering strategy.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "extendedAttributeIds",
            "in": "query",
            "description": "defines search condition by list of extendedAttributeIds  (comma separated). For OR filter is valid only for the first filter",
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "typeIds",
            "in": "query",
            "description": "in/not in filter, defines search condition by list of ticket type ids (comma separated). For OR filter numeric filter suffix can be added to name. See API description for filtering strategy. examples in - \"id1,id2\" not in - \"[notIn],id1,id2\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "typeNames",
            "in": "query",
            "description": "defines search condition by list of type names (comma separated). For OR filter numeric filter suffix can be added to name. See API description for filtering strategy. examples - \"name1,name2\", not in - \"[notIn],name1,name2\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryIds",
            "in": "query",
            "description": "in/not in filter, defines search condition by list of ticket category ids (comma separated). For OR filter numeric filter suffix can be added to name. See API description for filtering strategy. examples in - \"id1,id2\" not in - \"[notIn],id1,id2\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryNames",
            "in": "query",
            "description": "defines search condition by list of category names (comma separated). For OR filter numeric filter suffix can be added to name. See API description for filtering strategy. examples - \"name1,name2\", not in - \"[notIn],name1,name2\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdByIds",
            "in": "query",
            "description": "in/not in filter, defines search condition by list of ticket createdBy ids (comma separated). For OR filter numeric filter suffix can be added to name. See API description for filtering strategy. examples in - \"id1,id2\" not in - \"[notIn],id1,id2\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "updatedByIds",
            "in": "query",
            "description": "in/not in filter, defines search condition by list of ticket updatedBy ids (comma separated). For OR filter numeric filter suffix can be added to name. See API description for filtering strategy. examples in - \"id1,id2\" not in - \"[notIn],id1,id2\"",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "createdAtFrom",
            "in": "query",
            "description": "start date and time to filter by createdAt field. For OR filter numeric filter suffix can be added to name.\nSee API description for filtering strategy.\nsupports 3 value formats\n1. date only - '2019-01-31'\n2. date and time '2019-01-31T15:01:02'\n3. rfc3339 - '2019-10-12T07:20:50.52+00:00'\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "createdAtTo",
            "in": "query",
            "description": "end date and time to filter by createdAt field. For OR filter numeric filter suffix can be added to name.\nSee API description for filtering strategy.\nsupports 3 value formats\n1. date only - '2019-01-31' - in this case actual end date will be '2019-01-31T23:59:59'\n2. date and time '2019-01-31T15:01:02'\n3. rfc3339 - '2019-10-12T07:20:50.52+00:00'\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updatedAtFrom",
            "in": "query",
            "description": "start date and time to filter by updatedAt field. For OR filter numeric filter suffix can be added to name. \nSee API description for filtering strategy.\nsupports 3 value formats\n1. date only - '2019-01-31'\n2. date and time '2019-01-31T15:01:02'\n3. rfc3339 - '2019-10-12T07:20:50.52+00:00'\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "updatedAtTo",
            "in": "query",
            "description": "end date and time to filter by updatedAt field. For OR filter numeric filter suffix can be added to name. \nSee API description for filtering strategy.\nsupports 3 value formats\n1. date only - '2019-01-31' - in this case actual end date will be '2019-01-31T23:59:59'\n2. date and time '2019-01-31T15:01:02'\n3. rfc3339 - '2019-10-12T07:20:50.52+00:00'\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dueDateFrom",
            "in": "query",
            "description": "start date and time to filter by dueDate field. For OR filter numeric filter id can be added to name\nsupports 3 value formats\n1. date only - '2019-01-31'\n2. date and time '2019-01-31T15:01:02'\n3. rfc3339 - '2019-10-12T07:20:50.52+00:00'\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "dueDateTo",
            "in": "query",
            "description": "end date and time to filter by dueDate field. For OR filter numeric filter suffix can be added to name. \nSee API description for filtering strategy.\nsupports 3 value formats\n1. date only - '2019-01-31' - in this case actual end date will be '2019-01-31T23:59:59'\n2. date and time '2019-01-31T15:01:02'\n3. rfc3339 - '2019-10-12T07:20:50.52+00:00'\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "tagIds",
            "in": "query",
            "description": "defines search condition by list of tag ids (comma separated). For OR filter numeric filter suffix can be added to name. See API description for filtering strategy.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "tagNames",
            "in": "query",
            "description": "defines search condition by list of tag names (comma separated). For OR filter numeric filter suffix can be added to name. See API description for filtering strategy.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with all available tickets",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedTickets"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "get__api_platform_v1_service_ticketing_tickets"
      },
      "post": {
        "tags": [
          "Tickets"
        ],
        "summary": "Creates a new Service ticket",
        "description": "This API creates a new ticket in the system.\nThe 'read-only' parameters in the request body are ignored, if provided. See request body schema for details.\n",
        "requestBody": {
          "description": "the ticket object to be created in the system",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Ticket"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Ticket creation successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "400": {
            "description": "Bad/invalid Request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "post__api_platform_v1_service_ticketing_tickets"
      }
    },
    "/api/platform/v1/service/ticketing/tickets/{id}": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Returns a Service ticket",
        "description": "Fetches the ticket stored in the system against the provided id.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the ticket to be fetched",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with ticket in response body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "404": {
            "description": "the ticket with id parameter value provided in path does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "get__api_platform_v1_service_ticketing_tickets__id_"
      },
      "patch": {
        "tags": [
          "Tickets"
        ],
        "summary": "Updates a Service ticket",
        "description": "This API updates the existing ticket based on JSON Patch request received.\nThis API is suitable for changing specific fields of ticket without replacing the entire ticket object.\nFor more details on JSON Patch, please check http://jsonpatch.com/\nThe 'read-only' fields of ticket body cannot be updated using this API. For getting 'read-only' fields info, see ticket\nschema details\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the ticket to be updated",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "the ticket object to be updated in the system",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/json-patch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with patched ticket in response body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "400": {
            "description": "the request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          },
          "404": {
            "description": "the ticket with id parameter value provided in path does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          },
          "405": {
            "description": "Only replace operation is allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "patch__api_platform_v1_service_ticketing_tickets__id_"
      },
      "put": {
        "tags": [
          "Tickets"
        ],
        "summary": "Replace a Service ticket",
        "description": "This API replaces the existing ticket matching provided number with the one provided in the request body.\nThe ticket parameter values, except for 'read-only' ones (see request body documentation), are replaced with their correspoding values\nfrom request body of this API call.\nIf certain parameter is absent in the request body, it's default value may be used (if available).\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the ticket to be replaced",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "the ticket object to be replaced in the system",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Ticket"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with updated ticket in response body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Ticket"
                }
              }
            }
          },
          "400": {
            "description": "Bad/invalid Request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          },
          "404": {
            "description": "the ticket with id parameter value provided in path does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "put__api_platform_v1_service_ticketing_tickets__id_"
      }
    },
    "/api/platform/v1/service/ticketing/tickets/{id}/notes": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Returns selected Notes for Service ticket",
        "description": "This API fetches the selected notes for a specific ticket from system and returns it.\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the ticket for which notes API is being called",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "detail",
            "in": "query",
            "description": "filter by note detail",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "extendedAttributeIds",
            "in": "query",
            "description": "filter by extendedAttributeIds",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "visibility",
            "in": "query",
            "description": "a comma separated list of visibility ids to filter by note visibility field Visibility of the note:\n * 1 - Visible to all\n * 2 - Visible to a specific partner\n * 7 - Expert services,visible to partner and expert service users\n * 8 - Expert users,visible to expert users\n",
            "schema": {
              "type": "string",
              "example": "Id1,Id2"
            }
          },
          {
            "name": "createdBy",
            "in": "query",
            "description": "a comma separated list of user ids to filter by note createdBy field",
            "schema": {
              "type": "string",
              "example": "userId1,userId2"
            }
          },
          {
            "name": "createdAtFrom",
            "in": "query",
            "description": "start date and time to filter by createdAt field\nsupports 3 value formats\n1. date only - '2019-01-31'\n2. date and time '2019-01-31T15:01:02'\n3. rfc3339 - '2019-10-12T07:20:50.52+00:00'\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "createdAtTo",
            "in": "query",
            "description": "end date and time to filter by createdAt field\nsupports 3 value formats\n1. date only - '2019-01-31' - in this case actual end date will be '2019-01-31T23:59:59'\n2. date and time '2019-01-31T15:01:02'\n3. rfc3339 - '2019-10-12T07:20:50.52+00:00'\n",
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with selected notes for a specific ticket",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketNotes"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "get__api_platform_v1_service_ticketing_tickets__id__notes"
      },
      "post": {
        "tags": [
          "Tickets"
        ],
        "summary": "Creates a new Note for a Service ticket",
        "description": "This API creates a new note for the specified ticket in the system. The 'id' parameter value in the request body is ignored, if provided. A new 'id' is created  for the newly created note and provided in response body\n",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "the id of the ticket for which notes API is being called",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "the note object to be created in the system",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketNoteRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "note creation successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketNote"
                }
              }
            }
          },
          "400": {
            "description": "Bad/invalid Request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "post__api_platform_v1_service_ticketing_tickets__id__notes"
      }
    },
    "/api/platform/v1/service/ticketing/tickets/{id}/notes/{noteId}": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Returns a Note for a Service ticket",
        "description": "Fetches the ticket note stored in the system against the provided id.\n",
        "parameters": [
          {
            "name": "noteId",
            "in": "path",
            "description": "the id of the note to be fetched",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "the id of the ticket for which notes API is being called",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with ticket note in response body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketNote"
                }
              }
            }
          },
          "404": {
            "description": "the ticket note with id parameter value provided in path does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "get__api_platform_v1_service_ticketing_tickets__id__notes__noteId_"
      },
      "patch": {
        "tags": [
          "Tickets"
        ],
        "summary": "Updates a Note for a Service ticket",
        "description": "This API updates the existing note based on JSON Patch request received. This API is suitable for changing specific fields of note without replacing the entire note object. For more details on JSON Patch, please check http://jsonpatch.com/ The 'id' parameter value in the request body is ignored, if sent and 'id' parameter value from path is used as note id for this API\n",
        "parameters": [
          {
            "name": "noteId",
            "in": "path",
            "description": "the id of the note to be fetched",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "the id of the ticket for which notes API is being called",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "the note object to be updated in the system",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/json-patch"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with patched note in response body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketNote"
                }
              }
            }
          },
          "404": {
            "description": "the ticket note with id parameter value provided in path does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          },
          "405": {
            "description": "Only replace operation is allowed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "patch__api_platform_v1_service_ticketing_tickets__id__notes__noteId_"
      },
      "put": {
        "tags": [
          "Tickets"
        ],
        "summary": "Replace a Note for a Service ticket",
        "description": "This API replaces the existing ticket note matching provided id with the one provided in the request body. All the note parameter values, except for 'id', are replaced with their correspoding values from request body of this API call. If certain parameter is absent in the request body, it's default value is used. The 'id' parameter value in the request body is ignored, if sent and 'id' parameter value from path is used as note id for this API\n",
        "parameters": [
          {
            "name": "noteId",
            "in": "path",
            "description": "the id of the note to be fetched",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "the id of the ticket for which notes API is being called",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "the note object to be replaced in the system",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TicketNoteRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful response with updated note in response body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketNote"
                }
              }
            }
          },
          "400": {
            "description": "Bad/invalid Request body",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          },
          "404": {
            "description": "the ticket note with id parameter value provided in path does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "put__api_platform_v1_service_ticketing_tickets__id__notes__noteId_"
      }
    },
    "/api/platform/v1/service/ticketing/types": {
      "get": {
        "tags": [
          "Tickets"
        ],
        "summary": "Returns all ticket types",
        "description": "This API returns all the available types in the system. Pagination support is not available for this API yet, so this API may return large amount of data depending upon types present in the system.\n",
        "parameters": [
          {
            "name": "entity",
            "in": "query",
            "description": "Fetches the type stored in the system against the provided entity, the possible values is assignment",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response with all available types",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Types"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TicketAPIErrors"
                }
              }
            }
          }
        },
        "operationId": "get__api_platform_v1_service_ticketing_types"
      }
    },
    "/v1/custom-field/definitions": {
      "get": {
        "security": [
          {
            "custom_fields": [
              "platform.custom_fields_definitions.read"
            ]
          }
        ],
        "tags": [
          "Custom Fields Definitions"
        ],
        "summary": "Get the list of custom fields definitions for the given partner, including the vendor provided and partner defined.",
        "parameters": [
          {
            "$ref": "#/components/parameters/EntityTypeQuery"
          },
          {
            "$ref": "#/components/parameters/OriginType"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved partner attribute definitions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "allOf": [
                      {
                        "$ref": "#/components/schemas/PartnerAttributeDefinition"
                      }
                    ]
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "operationId": "get__v1_custom_field_definitions"
      },
      "post": {
        "security": [
          {
            "custom_fields": [
              "platform.custom_fields_definitions.write"
            ]
          }
        ],
        "tags": [
          "Custom Fields Definitions"
        ],
        "summary": "Create a new custom fields definition schema",
        "requestBody": {
          "$ref": "#/components/requestBodies/PartnerAttributeDefinitionPOST"
        },
        "responses": {
          "201": {
            "description": "Attribute definition added successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerAttributeDefinition"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "operationId": "post__v1_custom_field_definitions"
      }
    },
    "/v1/custom-field/definitions/{definitionID}": {
      "get": {
        "security": [
          {
            "custom_fields": [
              "platform.custom_fields_definitions.read"
            ]
          }
        ],
        "tags": [
          "Custom Fields Definitions"
        ],
        "summary": "Get the schema for the definition by the given definition id",
        "parameters": [
          {
            "$ref": "#/components/parameters/DefinitionID"
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the schema for the attribute definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerAttributeDefinition"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Partner not found / Definition not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "operationId": "get__v1_custom_field_definitions__definitionID_"
      },
      "put": {
        "security": [
          {
            "custom_fields": [
              "platform.custom_fields_definitions.write"
            ]
          }
        ],
        "tags": [
          "Custom Fields Definitions"
        ],
        "summary": "Update the schema for the definition by the given definition id",
        "parameters": [
          {
            "$ref": "#/components/parameters/DefinitionID"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PartnerAttributeDefinitionPUT"
        },
        "responses": {
          "200": {
            "description": "Successfully updated attribute definition",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PartnerAttributeDefinition"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Partner not found / Definition not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "operationId": "put__v1_custom_field_definitions__definitionID_"
      },
      "delete": {
        "security": [
          {
            "custom_fields": [
              "platform.custom_fields_definitions.write"
            ]
          }
        ],
        "tags": [
          "Custom Fields Definitions"
        ],
        "summary": "Delete definition and all its values by given id",
        "parameters": [
          {
            "$ref": "#/components/parameters/DefinitionID"
          }
        ],
        "responses": {
          "204": {
            "description": "Attribute definition deleted successfully",
            "content": {}
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Attribute definition not found / Partner not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Error"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "operationId": "delete__v1_custom_field_definitions__definitionID_"
      }
    },
    "/v1/device/endpoints/{endpointID}/custom-fields": {
      "get": {
        "security": [
          {
            "custom_fields": [
              "platform.custom_fields_values.read"
            ]
          }
        ],
        "tags": [
          "Custom Fields Values"
        ],
        "summary": "Retrieve multiple values of custom fields for the specific endpoint",
        "parameters": [
          {
            "$ref": "#/components/parameters/EndpointID"
          },
          {
            "$ref": "#/components/parameters/AttributeIDs"
          },
          {
            "$ref": "#/components/parameters/WithDefaults"
          },
          {
            "$ref": "#/components/parameters/OriginType"
          },
          {
            "$ref": "#/components/parameters/OwnerID"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all external attributes for the provided Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Attribute definition not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "operationId": "get__v1_device_endpoints__endpointID__custom_fields"
      },
      "put": {
        "security": [
          {
            "custom_fields": [
              "platform.custom_fields_values.write"
            ]
          }
        ],
        "tags": [
          "Custom Fields Values"
        ],
        "summary": "Updates multiple custom fields values for the given endpoint",
        "parameters": [
          {
            "$ref": "#/components/parameters/EndpointID"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PartnerAttributeValuesPUT"
        },
        "responses": {
          "200": {
            "description": "Attribute value successfully saved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "operationId": "put__v1_device_endpoints__endpointID__custom_fields"
      }
    },
    "/v1/company/companies/{companyId}/custom-fields": {
      "get": {
        "security": [
          {
            "custom_fields": [
              "platform.custom_fields_values.read"
            ]
          }
        ],
        "tags": [
          "Custom Fields Values"
        ],
        "summary": "Retrieve multiple values of custom fields for the specific company",
        "parameters": [
          {
            "$ref": "#/components/parameters/CompanyID"
          },
          {
            "$ref": "#/components/parameters/AttributeIDs"
          },
          {
            "$ref": "#/components/parameters/WithDefaults"
          },
          {
            "$ref": "#/components/parameters/OriginType"
          },
          {
            "$ref": "#/components/parameters/OwnerID"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all external attributes for the provided Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Attribute definition not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "operationId": "get__v1_company_companies__companyId__custom_fields"
      },
      "put": {
        "security": [
          {
            "custom_fields": [
              "platform.custom_fields_values.write"
            ]
          }
        ],
        "tags": [
          "Custom Fields Values"
        ],
        "summary": "Updates multiple custom fields values for the given company",
        "parameters": [
          {
            "$ref": "#/components/parameters/CompanyID"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PartnerAttributeValuesPUT"
        },
        "responses": {
          "200": {
            "description": "Attribute value successfully saved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "operationId": "put__v1_company_companies__companyId__custom_fields"
      }
    },
    "/v1/company/sites/{siteId}/custom-fields": {
      "get": {
        "security": [
          {
            "custom_fields": [
              "platform.custom_fields_values.read"
            ]
          }
        ],
        "tags": [
          "Custom Fields Values"
        ],
        "summary": "Retrieve multiple values of custom fields for the specific site",
        "parameters": [
          {
            "$ref": "#/components/parameters/SiteID"
          },
          {
            "$ref": "#/components/parameters/AttributeIDs"
          },
          {
            "$ref": "#/components/parameters/WithDefaults"
          },
          {
            "$ref": "#/components/parameters/OriginType"
          },
          {
            "$ref": "#/components/parameters/OwnerID"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieve all external attributes for the provided Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "Attribute definition not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "operationId": "get__v1_company_sites__siteId__custom_fields"
      },
      "put": {
        "security": [
          {
            "custom_fields": [
              "platform.custom_fields_values.write"
            ]
          }
        ],
        "tags": [
          "Custom Fields Values"
        ],
        "summary": "Updates multiple custom fields values for the given site",
        "parameters": [
          {
            "$ref": "#/components/parameters/SiteID"
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PartnerAttributeValuesPUT"
        },
        "responses": {
          "200": {
            "description": "Attribute value successfully saved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttributeValue"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        },
        "operationId": "put__v1_company_sites__siteId__custom_fields"
      }
    },
    "/v1/partners/{partnerID}/endpoints/{endpointId}/patches": {
      "get": {
        "tags": [
          "OS Patching"
        ],
        "summary": "Get list of patches by endpoint.",
        "x-cw-openapi": {
          "api-path": "/v1/patching/{endpointID}/patches",
          "api-scopes": [
            "platform.patching.read"
          ]
        },
        "parameters": [
          {
            "$ref": "#/components/parameters/partnerIdparam"
          },
          {
            "$ref": "#/components/parameters/endpointIdparam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful get list of patches",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "401": {
            "description": "Partner is not entitled for the feature",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "404": {
            "description": "Endpoint patches not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorMessage"
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        },
        "operationId": "get__v1_partners__partnerID__endpoints__endpointId__patches"
      }
    },
    "/api/platform/v1/automation/endpoints/schedule-tasks": {
      "post": {
        "tags": [
          "Automation"
        ],
        "summary": "Schedule a Task on target endpoints",
        "operationId": "Schedule_Task",
        "security": [
          {
            "automation_create": [
              "platform.automation.create"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleTask"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Task Execution Initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleTaskResult"
                }
              }
            }
          },
          "400": {
            "description": "Request Processing / validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTasks"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTasks"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTasks"
                }
              }
            }
          }
        }
      }
    },
    "/api/platform/api/platform/v1/automation/tasks/summary": {
      "get": {
        "tags": [
          "Automation"
        ],
        "summary": "Get Tasks Summary",
        "operationId": "Tasks_Summary",
        "security": [
          {
            "automation_read": [
              "platform.automation.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/To"
          }
        ],
        "responses": {
          "200": {
            "description": "Task Summary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskSummaryResult"
                }
              }
            }
          },
          "400": {
            "description": "Request Processing / validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTasks"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTasks"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTasks"
                }
              }
            }
          }
        }
      }
    },
    "/api/platform/v1/automation/endpoints/{endpointId}/tasks/summary": {
      "get": {
        "tags": [
          "Automation"
        ],
        "summary": "Get Tasks Summary for Endpoint",
        "operationId": "Endpoint_Task_Summary",
        "security": [
          {
            "automation_read": [
              "platform.automation.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/endpointIdparam"
          }
        ],
        "responses": {
          "200": {
            "description": "Endpoint Task Summary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EndpointTaskSummaryResult"
                }
              }
            }
          },
          "400": {
            "description": "Request Processing / validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTasks"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTasks"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTasks"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTasks"
                }
              }
            }
          }
        }
      }
    },
    "/api/platform/v1/automation/tasks/{taskId}/instance/summary": {
      "get": {
        "tags": [
          "Automation"
        ],
        "summary": "Get Task Instance Summary",
        "operationId": "Task_Instance_Summary",
        "security": [
          {
            "automation_read": [
              "platform.automation.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/taskIdparam"
          },
          {
            "$ref": "#/components/parameters/From"
          },
          {
            "$ref": "#/components/parameters/To"
          }
        ],
        "responses": {
          "200": {
            "description": "Instance Summary",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InstanceSummaryResult"
                }
              }
            }
          },
          "400": {
            "description": "Request Processing / validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTasks"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTasks"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTasks"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTasks"
                }
              }
            }
          }
        }
      }
    },
    "/api/platform/v1/automation/tasks/{taskId}/instances/{instanceId}/results": {
      "get": {
        "tags": [
          "Automation"
        ],
        "summary": "Get Task Instance Execution Results",
        "operationId": "get_task_instance_execution_results",
        "security": [
          {
            "automation_read": [
              "platform.automation.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/taskIdparam"
          },
          {
            "$ref": "#/components/parameters/instanceIdparam"
          }
        ],
        "responses": {
          "200": {
            "description": "Task Execution results by Instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TaskExecutionResultResult"
                }
              }
            }
          },
          "400": {
            "description": "Request Processing / validation failed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTasks"
                }
              }
            }
          },
          "401": {
            "description": "Authentication Failure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTasks"
                }
              }
            }
          },
          "404": {
            "description": "Task Instance does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTasks"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorTasks"
                }
              }
            }
          }
        }
      }
    },
    "/api/platform/v1/device/endpoints/{endpointId}/system-state-info": {
      "get": {
        "tags": [
          "Devices"
        ],
        "summary": "Get System State Information of Endpoint",
        "operationId": "System_State_Information_of_Endpoint",
        "security": [
          {
            "devices_read": [
              "platform.devices.read"
            ]
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/endpointIdparam"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SystemStateCollection"
                }
              }
            }
          },
          "404": {
            "description": "Not found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "parameters": {
      "companyID": {
        "name": "companyID",
        "description": "It is the company id at CW end. Vendors can fetch this via the existing topology mapping APIs.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "siteID": {
        "name": "siteID",
        "description": "It is the site id at CW end. Vendors can fetch this via the existing topology mapping APIs.",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "CompanyID": {
        "name": "companyId",
        "in": "path",
        "description": "Unique identifier for the company",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "SiteID": {
        "name": "siteId",
        "in": "path",
        "description": "Unique identifier for the site",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "EndpointID": {
        "name": "endpointID",
        "in": "path",
        "description": "Unique identifier for the endpoint",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "EntityTypeQuery": {
        "name": "entityType",
        "in": "query",
        "description": "Entity type for which the attribute definitions are to be retrieved.   Possible values: \"device\", \"company\", \"site\".\n",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "OriginType": {
        "name": "originType",
        "in": "query",
        "description": "Origin type for the attribute definitions. Possible values: \"partner\", \"vendor\".\n",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "DefinitionID": {
        "name": "definitionID",
        "in": "path",
        "description": "Unique identifier for the definition",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "AttributeIDs": {
        "name": "attributeIDs",
        "in": "query",
        "description": "Comma-separated list of attribute IDs",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "WithDefaults": {
        "name": "withDefaults",
        "in": "query",
        "description": "Include default values if true",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "OwnerID": {
        "name": "ownerID",
        "in": "query",
        "description": "Unique identifier for the owner",
        "required": false,
        "schema": {
          "type": "string"
        }
      },
      "partnerIdparam": {
        "name": "partnerID",
        "in": "path",
        "description": "This will contain Partner ID",
        "required": true,
        "x-cw-openapi-partnerid": true,
        "x-cw-id-mapping": {
          "entityType": "partner",
          "context": "platform"
        },
        "schema": {
          "type": "string"
        }
      },
      "endpointIdparam": {
        "name": "endpointId",
        "in": "path",
        "description": "This will contain Endpoint ID",
        "required": true,
        "x-cw-id-mapping": {
          "entityType": "endpoint",
          "context": "private"
        },
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "taskIdparam": {
        "name": "taskId",
        "in": "path",
        "description": "TaskId - Time UUID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "instanceIdparam": {
        "name": "instanceId",
        "in": "path",
        "description": "InstanceId - Time UUID",
        "required": true,
        "schema": {
          "type": "string",
          "format": "uuid"
        }
      },
      "From": {
        "name": "From",
        "in": "query",
        "required": false,
        "example": "2020-10-04T00:25:42.168Z",
        "schema": {
          "type": "string",
          "format": "datetime"
        }
      },
      "To": {
        "name": "To",
        "in": "query",
        "required": false,
        "example": "2020-10-05T00:25:42.168Z",
        "schema": {
          "type": "string",
          "format": "datetime"
        }
      }
    },
    "schemas": {
      "DeviceGroupWithRootBlockInVersionedPayload": {
        "title": "DeviceGroup Payload",
        "type": "object",
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "predefined": {
            "type": "boolean"
          },
          "static": {
            "type": "boolean"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "x-go-package": "gitlab.connectwisedev.com/platform/platform-dynamicgroup-service/src/apidocs"
      },
      "Message": {
        "title": "Message contains the message to send as a response.",
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "TemplateMetaData": {
        "description": "Shell scripts payload",
        "type": "object",
        "properties": {
          "Templates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ShellTemplateMetaData"
            }
          },
          "count": {
            "type": "integer"
          }
        }
      },
      "ShellTemplateMetaData": {
        "description": "Shell Scripts list",
        "type": "object",
        "properties": {
          "templateId": {
            "type": "string",
            "format": "uuid"
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "description": {
            "type": "string"
          },
          "executorEngine": {
            "type": "string"
          },
          "expectedExecutionTimeSec": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "jsonSchema": {
            "type": "string"
          },
          "operatingSystem": {
            "type": "object",
            "properties": {
              "string": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "format": "map[string][]string"
          },
          "hasParameters": {
            "type": "boolean"
          },
          "state": {
            "type": "string"
          },
          "createdOn": {
            "type": "string",
            "format": "dateTime"
          },
          "updatedOn": {
            "type": "string",
            "format": "dateTime"
          }
        }
      },
      "ErrorShellScripts": {
        "type": "object",
        "description": "Error response object will be sent from all the Rest endpoint in case of any failure or error",
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "Scripts": {
        "description": "List of Scripts",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ScriptMetadata"
        }
      },
      "ScriptMetadata": {
        "description": "Script Metadata model for the API",
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "ID of the script",
            "format": "uuid",
            "readOnly": true
          },
          "name": {
            "type": "string",
            "description": "Name of the script"
          },
          "description": {
            "type": "string",
            "description": "Description of the script"
          },
          "scriptCategory": {
            "type": "string",
            "description": "Category of the script"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date-time the script was last updated",
            "format": "date-time",
            "readOnly": true
          },
          "createdAt": {
            "type": "string",
            "description": "Date-time the script was created",
            "format": "date-time",
            "readOnly": true
          },
          "hasParameters": {
            "type": "boolean",
            "description": "Does script has parameters"
          }
        }
      },
      "ErrorScripts": {
        "type": "object",
        "description": "Error response object will be sent from all the Rest endpoint in case of any failure or error",
        "properties": {
          "message": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        }
      },
      "TaskDefinitionDetails": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "script"
            ]
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "dateTime"
          },
          "updatedAt": {
            "type": "string",
            "format": "dateTime"
          },
          "userParameters": {
            "type": "string",
            "format": "json"
          },
          "JSONSchema": {
            "type": "string",
            "format": "json"
          },
          "operatingSystem": {
            "type": "object",
            "properties": {
              "string": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            },
            "format": "map[string][]string",
            "example": {
              "windows": [
                "7",
                "10"
              ]
            }
          },
          "executorEngine": {
            "type": "string",
            "example": "ACTIONS"
          }
        }
      },
      "ErrorInvalidTasks": {
        "type": "string",
        "description": "Error response message will be sent from all the Rest endpoint in case of any failure or error",
        "example": "bearer token is missing, expired or invalid"
      },
      "ErrorForbiddenTasks": {
        "type": "string",
        "description": "Error response message will be sent from all the Rest endpoint in case of any failure or error",
        "example": "access is forbidden"
      },
      "ErrorTasks": {
        "type": "object",
        "description": "Error response object will be sent from all the Rest endpoint in case of any failure or error",
        "properties": {
          "message": {
            "type": "string",
            "example": "Error Message"
          },
          "code": {
            "type": "string",
            "example": "Error Code"
          }
        }
      },
      "Error": {
        "description": "Error response",
        "type": "object",
        "properties": {
          "error": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "Company": {
        "description": "Company is the struct definition of a Company",
        "properties": {
          "account": {
            "description": "CompanyAccountReference is the reference struct to be returned with Company info",
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "acquiredDate": {
            "format": "date-time",
            "type": "string"
          },
          "activityStatus": {
            "description": "CompanyActivityStatusReference is the reference struct to be returned with Company info",
            "properties": {
              "activeFlag": {
                "type": "boolean"
              },
              "defaultFlag": {
                "type": "boolean"
              },
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "corpContainer": {
            "properties": {
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "partnerId": {
                "type": "string"
              },
              "reportsToContainerId": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "deleteTxnId": {
            "type": "string"
          },
          "deletedBy": {
            "type": "string"
          },
          "deletedDate": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "externalIds": {
            "items": {
              "description": "CompanyIdMappingReference : reference struct used by company to return\nid mapping in additon to company data.",
              "properties": {
                "companyId": {
                  "type": "string"
                },
                "externalId": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "productId": {
                  "type": "string"
                },
                "productInstanceId": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "friendlyName": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inactiveDate": {
            "format": "date-time",
            "type": "string"
          },
          "industryCode": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "ownershipType": {
            "description": "CompanyOwnerShipTypeReference is the reference struct to be returned with Company info",
            "properties": {
              "defaultFlag": {
                "type": "boolean"
              },
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "partnerId": {
            "type": "string"
          },
          "primaryContact": {
            "description": "ContactReference : a reference struct used by other entities like company, but not sub-entities",
            "properties": {
              "description": {
                "type": "string"
              },
              "firstName": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "primaryAddress": {
                "description": "AddressReference is the subset address struct to be returned with contct info",
                "properties": {
                  "addressLine1": {
                    "type": "string"
                  },
                  "addressLine2": {
                    "type": "string"
                  },
                  "addressLine3": {
                    "type": "string"
                  },
                  "addressLine4": {
                    "type": "string"
                  },
                  "administrativeArea": {
                    "type": "string"
                  },
                  "billingFlag": {
                    "type": "boolean"
                  },
                  "country": {
                    "type": "string"
                  },
                  "countryCode": {
                    "type": "string"
                  },
                  "dependentLocality": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "locality": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "postCode": {
                    "type": "string"
                  },
                  "primaryFlag": {
                    "type": "boolean"
                  },
                  "shippingFlag": {
                    "type": "boolean"
                  },
                  "timeZone": {
                    "type": "string"
                  },
                  "type": {
                    "description": "Used in POST/PUT/PATCH requests to allow having the same JSON path as in GET, but to only allow setting an ID on this referenced entity, not other fields",
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "title": "Allows specifying a reference by ID only.",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "primaryEmail": {
                "description": "EmailReference is the struct definition of a Email",
                "properties": {
                  "activeFlag": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  },
                  "emailAddress": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "primaryFlag": {
                    "type": "boolean"
                  },
                  "type": {
                    "description": "Used in POST/PUT/PATCH requests to allow having the same JSON path as in GET, but to only allow setting an ID on this referenced entity, not other fields",
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "title": "Allows specifying a reference by ID only.",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "primaryFaxNumber": {
                "description": "FaxNumberReference",
                "properties": {
                  "activeFlag": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  },
                  "extension": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "nationalNumber": {
                    "type": "string"
                  },
                  "primaryFlag": {
                    "type": "boolean"
                  },
                  "type": {
                    "description": "Used in POST/PUT/PATCH requests to allow having the same JSON path as in GET, but to only allow setting an ID on this referenced entity, not other fields",
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "title": "Allows specifying a reference by ID only.",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "primaryPhoneNumber": {
                "description": "PhoneNumberReference",
                "properties": {
                  "activeFlag": {
                    "type": "boolean"
                  },
                  "countryCode": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "designation": {
                    "type": "string"
                  },
                  "extension": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "nationalNumber": {
                    "type": "string"
                  },
                  "primaryFlag": {
                    "type": "boolean"
                  },
                  "type": {
                    "description": "Used in POST/PUT/PATCH requests to allow having the same JSON path as in GET, but to only allow setting an ID on this referenced entity, not other fields",
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "title": "Allows specifying a reference by ID only.",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "primarySocialMedia": {
                "description": "SocialMediaReference is the reference struct to be returned with contact info",
                "properties": {
                  "activeFlag": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "link": {
                    "type": "string"
                  },
                  "primaryFlag": {
                    "type": "boolean"
                  },
                  "type": {
                    "description": "Used in POST/PUT/PATCH requests to allow having the same JSON path as in GET, but to only allow setting an ID on this referenced entity, not other fields",
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "title": "Allows specifying a reference by ID only.",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "salutation": {
                "type": "string"
              },
              "title": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "primarySite": {
            "description": "SiteReference is the reference struct returned with company info",
            "properties": {
              "externalIds": {
                "items": {
                  "properties": {
                    "backsynced": {
                      "example": false,
                      "type": "boolean"
                    },
                    "externalId": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "productId": {
                      "type": "string"
                    },
                    "productInstanceId": {
                      "type": "string"
                    },
                    "siteId": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "friendlyName": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "physicalAddressFlag": {
                "type": "boolean"
              },
              "primaryAddress": {
                "description": "SiteAddressReference is the subset address struct to be returned with site info",
                "properties": {
                  "addressLine1": {
                    "type": "string"
                  },
                  "addressLine2": {
                    "type": "string"
                  },
                  "addressLine3": {
                    "type": "string"
                  },
                  "addressLine4": {
                    "type": "string"
                  },
                  "administrativeArea": {
                    "type": "string"
                  },
                  "billingFlag": {
                    "type": "boolean"
                  },
                  "country": {
                    "type": "string"
                  },
                  "countryCode": {
                    "type": "string"
                  },
                  "dependentLocality": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "locality": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "phoneNumberId": {
                    "type": "string"
                  },
                  "postCode": {
                    "type": "string"
                  },
                  "primaryFlag": {
                    "type": "boolean"
                  },
                  "shippingFlag": {
                    "type": "boolean"
                  },
                  "timeZone": {
                    "type": "string"
                  }
                },
                "type": "object"
              },
              "primaryEmail": {
                "description": "SiteEmailReference is the subset email struct to be returned with site info",
                "properties": {
                  "activeFlag": {
                    "type": "boolean"
                  },
                  "emailAddress": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "primaryFlag": {
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "primaryFlag": {
                "type": "boolean"
              },
              "primaryPhoneNumber": {
                "properties": {
                  "activeFlag": {
                    "type": "boolean"
                  },
                  "countryCode": {
                    "type": "string"
                  },
                  "extension": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "nationalNumber": {
                    "type": "string"
                  },
                  "primaryFlag": {
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "primarySocialMedia": {
                "description": "SiteSocialMediaReference is the reference struct to be returned with Site info",
                "properties": {
                  "activeFlag": {
                    "type": "boolean"
                  },
                  "id": {
                    "type": "string"
                  },
                  "link": {
                    "type": "string"
                  },
                  "primaryFlag": {
                    "type": "boolean"
                  }
                },
                "type": "object"
              },
              "timeZone": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "updatedBy": {
            "type": "string"
          },
          "updatedDate": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Companies": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Company"
        }
      },
      "Site": {
        "description": "Site - structure returned in get site",
        "properties": {
          "activeFlag": {
            "type": "boolean"
          },
          "company": {
            "description": "CompanyAsParentReference is the reference struct returned with site info",
            "properties": {
              "externalIds": {
                "items": {
                  "description": "CompanyIdMappingReference : reference struct used by company to return\nid mapping in additon to company data.",
                  "properties": {
                    "companyId": {
                      "type": "string"
                    },
                    "externalId": {
                      "type": "string"
                    },
                    "id": {
                      "type": "string"
                    },
                    "productId": {
                      "type": "string"
                    },
                    "productInstanceId": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "friendlyName": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "createdBy": {
            "type": "string"
          },
          "createdDate": {
            "format": "date-time",
            "type": "string"
          },
          "deleteTxnId": {
            "type": "string"
          },
          "deletedBy": {
            "type": "string"
          },
          "deletedDate": {
            "format": "date-time",
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "externalIds": {
            "items": {
              "properties": {
                "backsynced": {
                  "example": false,
                  "type": "boolean"
                },
                "externalId": {
                  "type": "string"
                },
                "id": {
                  "type": "string"
                },
                "productId": {
                  "type": "string"
                },
                "productInstanceId": {
                  "type": "string"
                },
                "siteId": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          },
          "friendlyName": {
            "type": "string"
          },
          "id": {
            "type": "string"
          },
          "inactiveDate": {
            "format": "date-time",
            "type": "string"
          },
          "industryCode": {
            "type": "string"
          },
          "lastLockCreationDate": {
            "format": "date-time",
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "partnerId": {
            "type": "string"
          },
          "physicalAddressFlag": {
            "type": "boolean"
          },
          "primaryAddress": {
            "description": "SiteAddressReference is the subset address struct to be returned with site info",
            "properties": {
              "addressLine1": {
                "type": "string"
              },
              "addressLine2": {
                "type": "string"
              },
              "addressLine3": {
                "type": "string"
              },
              "addressLine4": {
                "type": "string"
              },
              "administrativeArea": {
                "type": "string"
              },
              "billingFlag": {
                "type": "boolean"
              },
              "country": {
                "type": "string"
              },
              "countryCode": {
                "type": "string"
              },
              "dependentLocality": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "locality": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "phoneNumberId": {
                "type": "string"
              },
              "postCode": {
                "type": "string"
              },
              "primaryFlag": {
                "type": "boolean"
              },
              "shippingFlag": {
                "type": "boolean"
              },
              "timeZone": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "primaryContact": {
            "description": "ContactReference : a reference struct used by other entities like company, but not sub-entities",
            "properties": {
              "description": {
                "type": "string"
              },
              "firstName": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "lastName": {
                "type": "string"
              },
              "primaryAddress": {
                "description": "AddressReference is the subset address struct to be returned with contct info",
                "properties": {
                  "addressLine1": {
                    "type": "string"
                  },
                  "addressLine2": {
                    "type": "string"
                  },
                  "addressLine3": {
                    "type": "string"
                  },
                  "addressLine4": {
                    "type": "string"
                  },
                  "administrativeArea": {
                    "type": "string"
                  },
                  "billingFlag": {
                    "type": "boolean"
                  },
                  "country": {
                    "type": "string"
                  },
                  "countryCode": {
                    "type": "string"
                  },
                  "dependentLocality": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "locality": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "postCode": {
                    "type": "string"
                  },
                  "primaryFlag": {
                    "type": "boolean"
                  },
                  "shippingFlag": {
                    "type": "boolean"
                  },
                  "timeZone": {
                    "type": "string"
                  },
                  "type": {
                    "description": "Used in POST/PUT/PATCH requests to allow having the same JSON path as in GET, but to only allow setting an ID on this referenced entity, not other fields",
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "title": "Allows specifying a reference by ID only.",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "primaryEmail": {
                "description": "EmailReference is the struct definition of a Email",
                "properties": {
                  "activeFlag": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  },
                  "emailAddress": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "primaryFlag": {
                    "type": "boolean"
                  },
                  "type": {
                    "description": "Used in POST/PUT/PATCH requests to allow having the same JSON path as in GET, but to only allow setting an ID on this referenced entity, not other fields",
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "title": "Allows specifying a reference by ID only.",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "primaryFaxNumber": {
                "description": "FaxNumberReference",
                "properties": {
                  "activeFlag": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  },
                  "extension": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "nationalNumber": {
                    "type": "string"
                  },
                  "primaryFlag": {
                    "type": "boolean"
                  },
                  "type": {
                    "description": "Used in POST/PUT/PATCH requests to allow having the same JSON path as in GET, but to only allow setting an ID on this referenced entity, not other fields",
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "title": "Allows specifying a reference by ID only.",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "primaryPhoneNumber": {
                "description": "PhoneNumberReference",
                "properties": {
                  "activeFlag": {
                    "type": "boolean"
                  },
                  "countryCode": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "designation": {
                    "type": "string"
                  },
                  "extension": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "nationalNumber": {
                    "type": "string"
                  },
                  "primaryFlag": {
                    "type": "boolean"
                  },
                  "type": {
                    "description": "Used in POST/PUT/PATCH requests to allow having the same JSON path as in GET, but to only allow setting an ID on this referenced entity, not other fields",
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "title": "Allows specifying a reference by ID only.",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "primarySocialMedia": {
                "description": "SocialMediaReference is the reference struct to be returned with contact info",
                "properties": {
                  "activeFlag": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  },
                  "id": {
                    "type": "string"
                  },
                  "link": {
                    "type": "string"
                  },
                  "primaryFlag": {
                    "type": "boolean"
                  },
                  "type": {
                    "description": "Used in POST/PUT/PATCH requests to allow having the same JSON path as in GET, but to only allow setting an ID on this referenced entity, not other fields",
                    "properties": {
                      "id": {
                        "type": "string"
                      }
                    },
                    "title": "Allows specifying a reference by ID only.",
                    "type": "object"
                  }
                },
                "type": "object"
              },
              "salutation": {
                "type": "string"
              },
              "title": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "primaryEmail": {
            "description": "SiteEmailReference is the subset email struct to be returned with site info",
            "properties": {
              "activeFlag": {
                "type": "boolean"
              },
              "emailAddress": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "primaryFlag": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "primaryFlag": {
            "type": "boolean"
          },
          "primaryPhoneNumber": {
            "properties": {
              "activeFlag": {
                "type": "boolean"
              },
              "countryCode": {
                "type": "string"
              },
              "extension": {
                "type": "string"
              },
              "id": {
                "type": "string"
              },
              "nationalNumber": {
                "type": "string"
              },
              "primaryFlag": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "primarySocialMedia": {
            "description": "SiteSocialMediaReference is the reference struct to be returned with Site info",
            "properties": {
              "activeFlag": {
                "type": "boolean"
              },
              "id": {
                "type": "string"
              },
              "link": {
                "type": "string"
              },
              "primaryFlag": {
                "type": "boolean"
              }
            },
            "type": "object"
          },
          "subEntityUpdatedBy": {
            "type": "string"
          },
          "subEntityUpdatedDate": {
            "format": "date-time",
            "type": "string"
          },
          "timeZone": {
            "type": "string"
          },
          "type": {
            "description": "SiteTypeReference is the reference struct to be returned with Site info",
            "properties": {
              "defaultFlag": {
                "type": "boolean"
              },
              "id": {
                "type": "string"
              },
              "name": {
                "type": "string"
              }
            },
            "type": "object"
          },
          "updatedBy": {
            "type": "string"
          },
          "updatedDate": {
            "format": "date-time",
            "type": "string"
          }
        },
        "type": "object"
      },
      "Sites": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Site"
        }
      },
      "SiteCreateRequest": {
        "description": "SiteCreateRequest - structure for parsing and validating site create payload",
        "properties": {
          "activeFlag": {
            "description": "in:body",
            "type": "boolean"
          },
          "description": {
            "description": "in:body",
            "type": "string"
          },
          "externalIds": {
            "items": {
              "properties": {
                "externalId": {
                  "description": "in:body",
                  "type": "string"
                },
                "productId": {
                  "description": "in:body",
                  "type": "string"
                },
                "productInstanceId": {
                  "description": "in:body",
                  "type": "string"
                }
              },
              "required": [
                "productId",
                "productInstanceId",
                "externalId"
              ],
              "type": "object"
            },
            "type": "array"
          },
          "friendlyName": {
            "description": "in:body",
            "type": "string"
          },
          "industryCode": {
            "description": "in:body",
            "example": "9999",
            "type": "string"
          },
          "name": {
            "description": "in:body",
            "type": "string"
          },
          "physicalAddressFlag": {
            "description": "in:body",
            "type": "boolean"
          },
          "primaryAddress": {
            "description": "SiteAddressCreateRequest - structure for parsing and validating site address create payload",
            "properties": {
              "activeFlag": {
                "description": "in:body",
                "type": "boolean"
              },
              "addressLine1": {
                "description": "in:body",
                "example": "4110 George Rd",
                "type": "string"
              },
              "addressLine2": {
                "description": "in:body",
                "example": "Suite 200",
                "type": "string"
              },
              "addressLine3": {
                "description": "in:body",
                "type": "string"
              },
              "addressLine4": {
                "description": "in:body",
                "type": "string"
              },
              "administrativeArea": {
                "description": "in:body",
                "example": "FL",
                "type": "string"
              },
              "billingFlag": {
                "description": "in:body",
                "type": "boolean"
              },
              "countryCode": {
                "example": "US",
                "type": "string"
              },
              "dependentLocality": {
                "description": "in:body",
                "type": "string"
              },
              "description": {
                "description": "in:body",
                "type": "string"
              },
              "externalIds": {
                "items": {
                  "properties": {
                    "externalId": {
                      "type": "string"
                    },
                    "productId": {
                      "type": "string"
                    },
                    "productInstanceId": {
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "type": "array"
              },
              "locality": {
                "description": "in:body",
                "example": "Tampa",
                "type": "string"
              },
              "name": {
                "description": "in:body",
                "type": "string"
              },
              "phoneNumberId": {
                "description": "in:body",
                "type": "string"
              },
              "postCode": {
                "description": "in:body",
                "example": "33634",
                "type": "string"
              },
              "primaryFlag": {
                "description": "in:body",
                "type": "boolean"
              },
              "shippingFlag": {
                "description": "in:body",
                "type": "boolean"
              },
              "timeZone": {
                "example": "(UTC-05:00) Eastern Time (US & Canada)",
                "type": "string"
              },
              "type": {
                "description": "Used in POST/PUT/PATCH requests to allow having the same JSON path as in GET, but to only allow setting an ID on this referenced entity, not other fields",
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "title": "Allows specifying a reference by ID only.",
                "type": "object"
              }
            },
            "required": [
              "countryCode"
            ],
            "type": "object"
          },
          "primaryEmail": {
            "description": "SiteEmailCreateRequest - structure for parsing and validating site email create payload",
            "properties": {
              "activeFlag": {
                "description": "in:body",
                "type": "boolean"
              },
              "description": {
                "description": "in:body",
                "type": "string"
              },
              "emailAddress": {
                "description": "in:body",
                "example": "no-reply@connectwise.com",
                "type": "string"
              },
              "primaryFlag": {
                "description": "in:body",
                "type": "boolean"
              },
              "type": {
                "description": "Used in POST/PUT/PATCH requests to allow having the same JSON path as in GET, but to only allow setting an ID on this referenced entity, not other fields",
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "title": "Allows specifying a reference by ID only.",
                "type": "object"
              }
            },
            "required": [
              "emailAddress"
            ],
            "type": "object"
          },
          "primaryFlag": {
            "description": "in:body",
            "type": "boolean"
          },
          "primaryPhoneNumber": {
            "description": "SitePhoneNumberCreateRequest - structure for parsing and validating site phone number create payload",
            "properties": {
              "activeFlag": {
                "description": "in:body",
                "type": "boolean"
              },
              "countryCode": {
                "description": "in:body",
                "example": "US",
                "type": "string"
              },
              "description": {
                "description": "in:body",
                "type": "string"
              },
              "extension": {
                "description": "in:body",
                "type": "string"
              },
              "externalIds": {
                "items": {
                  "properties": {
                    "externalId": {
                      "description": "in:body",
                      "type": "string"
                    },
                    "productId": {
                      "description": "in:body",
                      "type": "string"
                    },
                    "productInstanceId": {
                      "description": "in:body",
                      "type": "string"
                    }
                  },
                  "required": [
                    "productId",
                    "productInstanceId",
                    "externalId"
                  ],
                  "type": "object"
                },
                "type": "array"
              },
              "nationalNumber": {
                "description": "in:body",
                "example": "8134634700",
                "type": "string"
              },
              "primaryFlag": {
                "description": "in:body",
                "type": "boolean"
              },
              "type": {
                "description": "Used in POST/PUT/PATCH requests to allow having the same JSON path as in GET, but to only allow setting an ID on this referenced entity, not other fields",
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "title": "Allows specifying a reference by ID only.",
                "type": "object"
              }
            },
            "required": [
              "countryCode",
              "nationalNumber"
            ],
            "type": "object"
          },
          "primarySocialMedia": {
            "description": "SiteSocialMediaCreateRequest - structure for parsing and validating site social media create payload",
            "properties": {
              "activeFlag": {
                "description": "in:body",
                "type": "boolean"
              },
              "description": {
                "description": "in:body",
                "type": "string"
              },
              "link": {
                "description": "in:body",
                "type": "string"
              },
              "primaryFlag": {
                "description": "in:body",
                "type": "boolean"
              },
              "type": {
                "description": "Used in POST/PUT/PATCH requests to allow having the same JSON path as in GET, but to only allow setting an ID on this referenced entity, not other fields",
                "properties": {
                  "id": {
                    "type": "string"
                  }
                },
                "title": "Allows specifying a reference by ID only.",
                "type": "object"
              }
            },
            "required": [
              "link"
            ],
            "type": "object"
          },
          "timeZone": {
            "description": "in:body",
            "example": "(UTC-05:00) Eastern Time (US & Canada)",
            "type": "string"
          },
          "type": {
            "description": "Used in POST/PUT/PATCH requests to allow having the same JSON path as in GET, but to only allow setting an ID on this referenced entity, not other fields",
            "properties": {
              "id": {
                "type": "string"
              }
            },
            "title": "Allows specifying a reference by ID only.",
            "type": "object"
          }
        },
        "required": [
          "name",
          "timeZone"
        ],
        "type": "object"
      },
      "CustomError": {
        "properties": {
          "error": {
            "items": {
              "description": "CustomError contains the message about error",
              "properties": {
                "code": {
                  "type": "string"
                },
                "message": {
                  "type": "string"
                }
              },
              "type": "object"
            },
            "type": "array"
          }
        },
        "type": "object"
      },
      "PatchOperation": {
        "properties": {
          "from": {
            "type": "string"
          },
          "op": {
            "example": "replace",
            "type": "string"
          },
          "path": {
            "example": "/partnerId",
            "type": "string"
          },
          "value": {
            "example": "\"123\"",
            "type": "object"
          }
        },
        "required": [
          "op",
          "path"
        ],
        "title": "Operation represent a single patch operation. See http://jsonpatch.com/",
        "type": "object"
      },
      "PatchOperations": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/PatchOperation"
        }
      },
      "backupInstanceRecord": {
        "type": "object",
        "properties": {
          "backupJobID": {
            "type": "string",
            "description": "Identifier for the backup job."
          },
          "backupJobName": {
            "type": "string",
            "description": "Name of the backup job."
          },
          "jobType": {
            "type": "string",
            "description": "Type of the backup job. E.g. Replication Job."
          },
          "managedBy": {
            "type": "string",
            "description": "Describes how the backup is managed, e.g. Appliance or Portal."
          },
          "applianceName": {
            "type": "string",
            "description": "If the backup is managed by an appliance, this field will contain the device name of the appliance."
          },
          "applianceID": {
            "type": "string",
            "description": "If the backup is managed by an appliance, this field will contain the unique identifier for the appliance."
          },
          "devices": {
            "type": "array",
            "description": "This field contains details of all devices on which the job instance has run.",
            "items": {
              "type": "object",
              "properties": {
                "vendorDeviceID": {
                  "type": "string",
                  "description": "Identifier of the device on the vendor side."
                },
                "endpointID": {
                  "type": "string",
                  "description": "Identifier of the device at the connectwise side. Vendors can get this id from the existing endpoint-mapping APIs."
                },
                "instanceID": {
                  "type": "string",
                  "description": "Identifier for the backup job run instance. This is a unique identifier per device."
                },
                "deviceName": {
                  "type": "string",
                  "description": "The hostname of the device."
                },
                "deviceType": {
                  "type": "string",
                  "description": "The type of the device, this is normally the billing type. E.g. Desktop, Server, VM, etc.",
                  "example": "Desktop"
                },
                "backupStatus": {
                  "type": "string",
                  "enum": [
                    "Success",
                    "Failure",
                    "Unknown",
                    "Warning",
                    "Missed",
                    "Running",
                    "Paused"
                  ],
                  "description": "Status of the backup job run instance. Map the vendor backup status to this enum field."
                },
                "summary": {
                  "type": "string",
                  "description": "This field holds the notes and information about the backup job run.",
                  "maxLength": 1000
                },
                "vendorBackupStatus": {
                  "type": "string",
                  "description": "Status of the backup job run at the vendor end."
                },
                "backupSize": {
                  "type": "number",
                  "description": "The size of the backup image taken after the job run in bytes. Send this field as 0 or choose not to send it for incomplete jobs.",
                  "example": 512000000
                },
                "totalBackupSize": {
                  "type": "number",
                  "description": "The total size of the backup images stored for all backup job runs in bytes. It is the summation of backup image size of all previous and current runs.",
                  "example": 800000000
                },
                "protectedSize": {
                  "type": "number",
                  "description": "The size of the user data that is protected by the job in bytes. Send this field as 0 or choose not to send it for incomplete jobs.",
                  "example": 1024000000
                },
                "backupLocation": {
                  "type": "string",
                  "description": "The location where the backup is stored. This can be multiple locations such as Local, cloud url, etc. Send comma-separated values of location."
                },
                "lastBackupTimestamp": {
                  "type": "number",
                  "description": "The end timestamp of the last backup job run instance. The timestamp must be in milliseconds. This is excluding the current run. If it is unavailable you can choose to not send it.",
                  "example": 1692955384000
                },
                "nextBackupTimestamp": {
                  "type": "number",
                  "description": "The start timestamp of the next scheduled job. The timestamp must be in milliseconds.",
                  "example": 1692955384000
                },
                "startTimestamp": {
                  "type": "number",
                  "description": "Timestamp when the backup job run instance started. The timestamp must be in milliseconds.",
                  "example": 1692955384000
                },
                "endTimestamp": {
                  "type": "number",
                  "description": "Timestamp when the backup job run instance ended. The timestamp must be in milliseconds. This field needs to be sent for completed jobs. No need to send for Paused and Running jobs.",
                  "example": 1692955384000
                },
                "agentVersion": {
                  "type": "string",
                  "description": "This is the version of the vendor agent installed in the device where the backup job has run. We need"
                },
                "recoveryPointID": {
                  "type": "string",
                  "description": "It is the identifier for the recovery point created after the backup is run. This can help us map dr runs with backup job runs. The recovery point id is mandatory when status is Success. It is non-mandatory for other statuses."
                }
              },
              "required": [
                "instanceID",
                "vendorDeviceID",
                "endpointID",
                "deviceName",
                "deviceType",
                "startTimestamp",
                "backupStatus",
                "vendorBackupStatus",
                "backupLocation",
                "agentVersion"
              ]
            }
          }
        },
        "required": [
          "backupJobID",
          "backupJobName",
          "jobType",
          "managedBy",
          "devices"
        ]
      },
      "drReadinessRecord": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Identifier for this dr-readiness run. This is a unique identifier at the vendor end."
          },
          "triggeredBy": {
            "type": "string",
            "description": "This field specifies how the dr readiness was triggered. It can be Manual, Automated, etc."
          },
          "backupJobID": {
            "type": "string",
            "description": "This is the unique identifier for a job in the vendor side."
          },
          "backupName": {
            "type": "string",
            "description": "This is the name of the backup job on the vendor side."
          },
          "devices": {
            "type": "array",
            "description": "This field contains details of all devices on which the job instance has run.",
            "items": {
              "type": "object",
              "properties": {
                "vendorDeviceID": {
                  "type": "string",
                  "description": "Identifier of the device on the vendor side."
                },
                "endpointID": {
                  "type": "string",
                  "description": "Identifier of the device at the connectwise side. Vendors can get this id from the existing endpoint-mapping APIs."
                },
                "instanceID": {
                  "type": "string",
                  "description": "Identifier for this dr-readiness run on a device. This field is used to uniquely identify a dr readiness run on a device."
                },
                "backupInstanceID": {
                  "type": "string",
                  "description": "This is the unique identifier for a job run instance. This is used to identify which backup job has triggered the dr verification run."
                },
                "recoveryPointID": {
                  "type": "string",
                  "description": "It is the identifier for the recovery point created after the backup is run. This can help us map dr runs with backup job runs. If there are multiple recovery points just return the recovery point of the latest job."
                },
                "verificationImages": {
                  "type": "array",
                  "description": "reference images of screenshots taken after DR run. No need to send this when dr readiness job is unsuccessful if screenshot is not taken. In case of unsuccessful dr runs, if no screenshots are available, please do not send this field. `[]` or `null` will be treated as incorrect value and return 400.",
                  "items": {
                    "type": "string"
                  }
                },
                "startTimestamp": {
                  "type": "number",
                  "description": "Timestamp when the dr-readiness job started. The timestamp must be in milliseconds.",
                  "example": 1692955384000
                },
                "endTimestamp": {
                  "type": "number",
                  "description": "Timestamp when the dr-readiness job finished. The timestamp must be in milliseconds. This field needs to be sent for completed jobs.",
                  "example": 1692955384000
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "Success",
                    "Failure",
                    "Warning",
                    "Missed",
                    "Unknown"
                  ],
                  "description": "Status of the dr readiness verification run. This field is mapped with the `vendorStatus` field."
                },
                "summary": {
                  "type": "string",
                  "description": "This field holds the notes and information about the dr job run. This can get us low-level information about the dr run.",
                  "maxLength": 1000
                },
                "vendorStatus": {
                  "type": "string",
                  "description": "Status of the dr readiness verification at the vendor end. This field will be used to map the `Unknown` values in the `status` fields."
                }
              },
              "required": [
                "instanceID",
                "vendorDeviceID",
                "endpointID",
                "startTimestamp",
                "status",
                "summary",
                "vendorStatus"
              ]
            }
          }
        },
        "required": [
          "id",
          "triggeredBy",
          "devices"
        ]
      },
      "alarmRecord": {
        "type": "object",
        "properties": {
          "family": {
            "type": "string",
            "description": "This is the grouping of alarms, based on the type of the alarm. This field represents the condition of the alarm trigger."
          },
          "severity": {
            "type": "string",
            "description": "This is the severity of the alarm raised by the vendor.",
            "enum": [
              "Critical",
              "High",
              "Medium",
              "Low",
              "Info"
            ]
          },
          "type": {
            "type": "string",
            "description": "This field represents the level at which the alarm has been raised.",
            "enum": [
              "Device",
              "Backup",
              "Site"
            ]
          },
          "alarms": {
            "type": "array",
            "description": "This field contains all the alarm details specific to an instance of the alarm.",
            "items": {
              "type": "object",
              "properties": {
                "vendorDeviceID": {
                  "type": "string",
                  "description": "Identifier of the device on the vendor side. No need to send this field for Site level alarms."
                },
                "endpointID": {
                  "type": "string",
                  "description": "Identifier of the device at the connectwise side. Vendors can get this id from the existing endpoint-mapping APIs. No need to send this field for Site level alarms."
                },
                "vendorAlarmID": {
                  "type": "string",
                  "description": "This field is the unique identifier of the alarm on the vendor side."
                },
                "backupJobName": {
                  "type": "string",
                  "description": "This is the name of the backup job on the vendor side. This is mandatory if we are getting backupInstanceID & backupTimestamp. No need to send this for Device and Site level alarms."
                },
                "backupJobID": {
                  "type": "string",
                  "description": "Identifier for the backup job on the vendor side. This is mandatory if we are getting backupInstanceID & backupTimestamp. No need to send this for Device and Site level alarms."
                },
                "backupTimestamp": {
                  "type": "number",
                  "description": "Timestamp of the backup job run instance. This is mandatory if we are getting backupJobName & backupInstanceID. The timestamp must be in milliseconds. No need to send this for Device and Site level alarms.",
                  "example": 1692955384000
                },
                "backupInstanceID": {
                  "type": "string",
                  "description": "This is the unique identifier for a job run instance. This is used to identify which backup job has raised this alarm. This is mandatory if we are getting backupJobName & backupTimestamp. No need to send this for Device and Site level alarms."
                },
                "name": {
                  "type": "string",
                  "description": "Name of the alarm. This is a human-readable format for describing alarm summaries."
                },
                "description": {
                  "type": "string",
                  "description": "Full description of the alarm."
                },
                "timestamp": {
                  "type": "number",
                  "description": "Time when the alarm was created. The timestamp must be in milliseconds.",
                  "example": 1692955384000
                }
              },
              "required": [
                "vendorAlarmID",
                "name",
                "description",
                "timestamp"
              ]
            }
          }
        },
        "required": [
          "family",
          "severity",
          "type",
          "alarms"
        ]
      },
      "endpointList": {
        "type": "object",
        "properties": {
          "endpoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/endpoint"
            }
          }
        }
      },
      "endpoint": {
        "type": "object",
        "properties": {
          "clientId": {
            "type": "string",
            "description": "Client id"
          },
          "siteId": {
            "type": "string",
            "description": "Site id"
          },
          "endpointId": {
            "type": "string",
            "description": "Endpoint id"
          },
          "regId": {
            "type": "string",
            "description": "reg id"
          },
          "endpointType": {
            "type": "string",
            "description": "Endpoint Type"
          },
          "osType": {
            "type": "string",
            "description": "OS type"
          }
        }
      },
      "ServiceList": {
        "type": "object",
        "properties": {
          "services": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Services"
            }
          }
        }
      },
      "Services": {
        "type": "object",
        "properties": {
          "ServiceName": {
            "type": "string",
            "description": "ServiceName"
          },
          "DisplayName": {
            "type": "string",
            "description": "DisplayName"
          }
        }
      },
      "Categories": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Category"
        }
      },
      "Category": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string"
          }
        }
      },
      "Id": {
        "type": "object",
        "required": [
          "id"
        ],
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "IdWithName": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          }
        }
      },
      "PaginatedTickets": {
        "type": "object",
        "properties": {
          "tickets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Ticket"
            }
          },
          "totalCount": {
            "type": "integer"
          }
        }
      },
      "Priorities": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Priority"
        }
      },
      "Priority": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string"
          }
        }
      },
      "ServiceBoard": {
        "type": "object",
        "required": [
          "name",
          "defaultPriority"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          },
          "defaultPriority": {
            "$ref": "#/components/schemas/IdWithName"
          },
          "description": {
            "type": "string",
            "maxLength": 280
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "inactiveFlag": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string"
          }
        }
      },
      "ServiceBoardTeam": {
        "type": "object",
        "required": [
          "teamId"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "serviceBoardId": {
            "type": "string",
            "format": "uuid"
          },
          "teamId": {
            "type": "string",
            "format": "uuid"
          },
          "teamName": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string"
          }
        }
      },
      "ServiceBoardTeams": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ServiceBoardTeam"
        }
      },
      "ServiceBoards": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/ServiceBoard"
        }
      },
      "Source": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string"
          }
        }
      },
      "Sources": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Source"
        }
      },
      "Status": {
        "type": "object",
        "required": [
          "name",
          "category",
          "slaStatus"
        ],
        "properties": {
          "category": {
            "type": "string",
            "enum": [
              "New",
              "InProgress",
              "Closed"
            ]
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "inactiveFlag": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "slaStatus": {
            "type": "string",
            "enum": [
              "NotResponded",
              "Responded",
              "PlanCreated",
              "Resolved",
              "Waiting"
            ]
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string"
          }
        }
      },
      "Statuses": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Status"
        }
      },
      "Tag": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "inactiveFlag": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 50
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string"
          }
        }
      },
      "Tags": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Tag"
        }
      },
      "Ticket": {
        "type": "object",
        "required": [
          "summary",
          "description",
          "serviceBoard",
          "source"
        ],
        "properties": {
          "assets": {
            "type": "array",
            "description": "The array of asset ids which are associated with this ticket.",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "format": "uuid"
                }
              }
            }
          },
          "assignee": {
            "$ref": "#/components/schemas/Id"
          },
          "assigneeTeam": {
            "$ref": "#/components/schemas/IdWithName"
          },
          "category": {
            "$ref": "#/components/schemas/IdWithName"
          },
          "company": {
            "$ref": "#/components/schemas/Id"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Read-only field. The UTC timestamp when the ticket is created."
          },
          "createdBy": {
            "$ref": "#/components/schemas/Id"
          },
          "description": {
            "type": "string",
            "description": "The description of the ticket.",
            "minLength": 1,
            "maxLength": 10000
          },
          "dueDate": {
            "type": "string",
            "format": "mm/dd/yyyy",
            "description": "The due date of the ticket as stored in system."
          },
          "extendedAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketingExtendedAttribute"
            }
          },
          "id": {
            "type": "string",
            "format": "uuid",
            "description": "Read-only field. This is auto-generated universally unique identifier (UUID) of the ticket"
          },
          "nocTicketId": {
            "type": "string",
            "description": "Read-only field. The id of the ticket in NOCBO database."
          },
          "number": {
            "type": "string",
            "description": "Read-only field. This is auto-generated number of the ticket."
          },
          "priority": {
            "$ref": "#/components/schemas/IdWithName"
          },
          "serviceBoard": {
            "$ref": "#/components/schemas/IdWithName"
          },
          "site": {
            "$ref": "#/components/schemas/Id"
          },
          "source": {
            "$ref": "#/components/schemas/IdWithName"
          },
          "status": {
            "$ref": "#/components/schemas/IdWithName"
          },
          "summary": {
            "type": "string",
            "description": "The mandatory free-text summary of the ticket.",
            "minLength": 1,
            "maxLength": 255
          },
          "tags": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdWithName"
            }
          },
          "type": {
            "$ref": "#/components/schemas/IdWithName"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Read-only field. The UTC timestamp when the ticket is last updated."
          },
          "updatedBy": {
            "$ref": "#/components/schemas/Id"
          },
          "version": {
            "type": "integer",
            "description": "Read-only field.\nThe monotonically increasing version number of ticket.\nIt is set to 1 on creation and is incremented for every update.\n"
          }
        }
      },
      "TicketAPIError": {
        "type": "object",
        "required": [
          "code",
          "message"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "The unique code identifying this error."
          },
          "message": {
            "type": "string",
            "description": "the user friendly message for this error."
          }
        }
      },
      "TicketAPIErrors": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TicketAPIError"
        }
      },
      "TicketCount": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "This identifies the category of group of tickets for which the count is returned. E.g. category could be status, priority, etc. which means tickets are grouped by status, priority, etc. respectively."
          },
          "count": {
            "type": "integer"
          },
          "name": {
            "type": "string",
            "description": "This is the actual group name i.e. if category is status, then this attribute would identify actual status name for which count is returned."
          }
        }
      },
      "TicketCounts": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TicketCount"
        }
      },
      "TicketNote": {
        "allOf": [
          {
            "$ref": "#/components/schemas/TicketNoteRequest"
          },
          {
            "type": "object",
            "properties": {
              "createdAt": {
                "type": "string",
                "format": "date-time"
              },
              "createdBy": {
                "type": "string"
              },
              "createdById": {
                "type": "string"
              },
              "extendedAttributes": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/TicketingExtendedAttribute"
                }
              },
              "id": {
                "type": "string",
                "format": "uuid"
              },
              "selfCreated": {
                "type": "boolean"
              },
              "ticketId": {
                "type": "string",
                "format": "uuid"
              },
              "updatedAt": {
                "type": "string",
                "format": "date-time"
              },
              "updatedBy": {
                "type": "string"
              },
              "updatedById": {
                "type": "string"
              }
            }
          }
        ]
      },
      "TicketNoteRequest": {
        "type": "object",
        "required": [
          "detail",
          "visibility"
        ],
        "properties": {
          "detail": {
            "type": "string",
            "minLength": 1,
            "maxLength": 12000
          },
          "extendedAttributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketingExtendedAttribute"
            }
          },
          "visibility": {
            "type": "integer",
            "description": "Visibility of the note:\n * 1 - Visible to all\n * 2 - Visible to a specific partner\n * 7 - Expert services,visible to partner and expert service users\n * 8 - Expert users,visible to expert users\n",
            "enum": [
              1,
              2,
              7,
              8
            ]
          }
        }
      },
      "TicketNotes": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/TicketNote"
        }
      },
      "TicketingExtendedAttribute": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "value": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "boolean"
              },
              {
                "type": "integer"
              },
              {
                "type": "string",
                "format": "date-time"
              }
            ]
          }
        }
      },
      "Type": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string"
          },
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string"
          }
        }
      },
      "Types": {
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Type"
        }
      },
      "json-patch": {
        "type": "array",
        "description": "JSON schema for JSONPatch files",
        "items": {
          "$ref": "#/components/schemas/patch-document"
        }
      },
      "patch-document": {
        "type": "object",
        "description": "A JSONPatch document as defined by RFC 6902",
        "required": [
          "op",
          "path",
          "value"
        ],
        "properties": {
          "op": {
            "type": "string",
            "description": "The operation to be performed",
            "enum": [
              "replace"
            ]
          },
          "path": {
            "type": "string",
            "description": "A JSON-Pointer"
          },
          "value": {
            "type": "object",
            "description": "The value to be used within the operations."
          }
        }
      },
      "PartnerAttributeDefinition": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier for the attribute definition"
          },
          "name": {
            "type": "string",
            "description": "Name of the attribute"
          },
          "description": {
            "type": "string",
            "description": "Description of the attribute"
          },
          "type": {
            "type": "string",
            "description": "Type of the attribute (e.g., string, number, boolean)"
          },
          "required": {
            "type": "boolean",
            "description": "Whether the attribute is required"
          },
          "defaultValue": {
            "type": "string",
            "description": "Default value of the attribute"
          },
          "options": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of possible values for the attribute if it is of type \"enum\""
          },
          "validation": {
            "type": "object",
            "description": "Validation rules for the attribute",
            "properties": {
              "minLength": {
                "type": "integer",
                "description": "Minimum length for the attribute value"
              },
              "maxLength": {
                "type": "integer",
                "description": "Maximum length for the attribute value"
              },
              "pattern": {
                "type": "string",
                "description": "Regular expression pattern for the attribute value"
              }
            }
          }
        }
      },
      "AttributeValue": {
        "type": "object",
        "properties": {
          "attributeID": {
            "type": "string",
            "description": "Unique identifier for the attribute"
          },
          "value": {
            "type": "string",
            "description": "Value of the attribute"
          }
        }
      },
      "PatchDetails": {
        "type": "object",
        "properties": {
          "summary": {
            "description": "Endpoint patches summary data",
            "type": "object",
            "properties": {
              "assessedAt": {
                "type": "string",
                "format": "date-time"
              },
              "missingCount": {
                "description": "Total count of policy match missing patches",
                "type": "integer"
              },
              "pendingRebootCount": {
                "description": "Total count of policy match reboot pending patches",
                "type": "integer"
              },
              "installedCount": {
                "description": "Total count of policy match installed patches",
                "type": "integer"
              },
              "compliance": {
                "description": "Policy based patches (excluding optional) compliance score",
                "type": "number"
              },
              "outOfSupport": {
                "description": "Out of support status",
                "type": "boolean"
              },
              "deploymentStatus": {
                "description": "if deployed already or not",
                "type": "boolean"
              },
              "policyName": {
                "type": "string"
              }
            }
          },
          "patches": {
            "description": "Array of endpoint patches",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PatchDetail"
            }
          }
        }
      },
      "PatchDetail": {
        "type": "object",
        "properties": {
          "updateID": {
            "type": "string",
            "format": "uuid"
          },
          "kbArticleID": {
            "type": "string"
          },
          "status": {
            "type": "integer"
          },
          "classification": {
            "type": "string"
          },
          "rebootBehavior": {
            "type": "string"
          },
          "msrcID": {
            "type": "string"
          },
          "msrcSeverity": {
            "type": "string"
          },
          "nocTestingStatus": {
            "type": "string"
          },
          "partnerApprovalStatus": {
            "type": "string"
          },
          "size": {
            "type": "string"
          },
          "moreInformationLink": {
            "type": "string"
          },
          "policyMatch": {
            "type": "boolean"
          },
          "installedBy": {
            "type": "string"
          },
          "installedDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ErrorMessage": {
        "type": "object",
        "properties": {
          "error": {
            "type": "object",
            "properties": {
              "message": {
                "description": "Error message",
                "type": "string"
              }
            }
          }
        }
      },
      "ScheduleTask": {
        "allOf": [
          {
            "$ref": "#/components/schemas/ExecuteTask"
          },
          {
            "type": "object",
            "description": "ScheduleTask - Used for scheduling of a task",
            "properties": {
              "schedule": {
                "type": "object",
                "description": "Schedule Object have details about different schedules",
                "properties": {
                  "scheduleType": {
                    "type": "string",
                    "format": "ScheduleType",
                    "description": "What is the type of schedule"
                  },
                  "regularity": {
                    "type": "string",
                    "format": "Regularity",
                    "description": "When to trigger this schedule"
                  },
                  "startDate": {
                    "type": "string",
                    "format": "time.Time"
                  },
                  "endDate": {
                    "type": "string",
                    "format": "time.Time"
                  },
                  "endDateType": {
                    "type": "string",
                    "format": "EndDateType"
                  },
                  "timeFrameType": {
                    "type": "string",
                    "format": "TimeFrameType"
                  },
                  "startTimeFrame": {
                    "type": "string",
                    "format": "time.Time"
                  },
                  "endTimeFrame": {
                    "type": "string",
                    "format": "time.Time"
                  },
                  "category": {
                    "type": "string",
                    "format": "Category"
                  },
                  "timeZone": {
                    "type": "string"
                  },
                  "triggerType": {
                    "type": "string"
                  },
                  "repeat": {
                    "type": "object",
                    "description": "Repeat Interval for recurrent task",
                    "properties": {
                      "every": {
                        "type": "number",
                        "format": "int"
                      },
                      "runTime": {
                        "type": "string",
                        "format": "time.Time"
                      },
                      "frequency": {
                        "type": "string",
                        "format": "Frequency"
                      },
                      "daysOfMonth": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "int"
                        }
                      },
                      "weekDay": {
                        "type": "object",
                        "properties": {
                          "Day": {
                            "type": "string",
                            "format": "time.WeekDay"
                          },
                          "Index": {
                            "type": "string",
                            "format": "Index"
                          }
                        }
                      },
                      "weekDays": {
                        "type": "array",
                        "items": {
                          "type": "string",
                          "format": "WeekDay"
                        }
                      },
                      "daysOfWeek": {
                        "type": "string",
                        "format": "int"
                      },
                      "period": {
                        "type": "string",
                        "format": "int"
                      }
                    }
                  }
                }
              }
            }
          }
        ]
      },
      "ExecuteTask": {
        "type": "object",
        "description": "ExecuteTask - Used for execution of a task",
        "properties": {
          "templateID": {
            "type": "string",
            "format": "uuid"
          },
          "templateType": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "resourcesType": {
            "type": "string"
          },
          "parameters": {
            "type": "string"
          },
          "targets": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uuid"
            }
          },
          "targetType": {
            "type": "string",
            "example": "MANAGED_ENDPOINT"
          }
        }
      },
      "ScheduleTaskResult": {
        "allOf": [
          {
            "type": "object",
            "description": "ScheduleTaskResult - Used for result  of a task creation/submission",
            "properties": {
              "taskId": {
                "type": "string",
                "format": "uuid"
              },
              "templateId": {
                "type": "string",
                "format": "timeuuid"
              },
              "templateType": {
                "type": "string"
              },
              "name": {
                "type": "string"
              },
              "createdOn": {
                "type": "string",
                "format": "time.Time"
              },
              "modifiedOn": {
                "type": "string",
                "format": "time.Time"
              },
              "stateToBeSubmitted": {
                "type": "string",
                "format": "State"
              }
            }
          }
        ]
      },
      "TaskSummaryResult": {
        "type": "array",
        "description": "Task TaskSummary Results",
        "items": {
          "$ref": "#/components/schemas/TaskSummary"
        }
      },
      "TaskSummary": {
        "type": "object",
        "description": "TaskSummary - Summary result returned from the Tasking",
        "properties": {
          "canBeCancelled": {
            "type": "boolean"
          },
          "canBePostponed": {
            "type": "boolean"
          },
          "createdOn": {
            "type": "string",
            "format": "datetime"
          },
          "description": {
            "type": "string"
          },
          "executedOn": {
            "type": "string",
            "format": "datetime"
          },
          "CreatedOnDay": {
            "type": "integer"
          },
          "endpointStatuses": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "executionStates": {
            "type": "object",
            "properties": {
              "deviceCount": {
                "type": "integer",
                "example": 0
              },
              "successCount": {
                "type": "integer",
                "example": 1
              },
              "failureCount": {
                "type": "integer",
                "example": 1
              }
            }
          },
          "taskID": {
            "type": "string",
            "format": "timeuuid"
          },
          "modifiedOn": {
            "type": "string",
            "format": "datetime"
          },
          "name": {
            "type": "string"
          },
          "nextSchedule": {
            "type": "string",
            "format": "datetime"
          },
          "regularity": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "executionStatus": {
            "type": "string"
          },
          "scheduleType": {
            "type": "string"
          },
          "TemplateType": {
            "type": "string"
          },
          "triggeredBy": {
            "type": "string",
            "description": "optional"
          },
          "TemplateID": {
            "type": "string",
            "format": "uuid"
          },
          "taskInstanceId": {
            "type": "string",
            "format": "uuid"
          },
          "TimeZone": {
            "type": "string"
          },
          "is_deactivated": {
            "type": "boolean"
          }
        }
      },
      "EndpointTaskSummaryResult": {
        "type": "array",
        "description": "Endpoint Tasks Summary",
        "items": {
          "$ref": "#/components/schemas/EndpointTaskSummary"
        }
      },
      "EndpointTaskSummary": {
        "type": "object",
        "description": "TaskSummary - Summary result returned from the Tasking",
        "properties": {
          "canBeCancelled": {
            "type": "boolean"
          },
          "canBePostponed": {
            "type": "boolean"
          },
          "createdOn": {
            "type": "string",
            "format": "datetime"
          },
          "description": {
            "type": "string"
          },
          "executedOn": {
            "type": "string",
            "format": "datetime"
          },
          "taskID": {
            "type": "string",
            "format": "timeuuid"
          },
          "modifiedOn": {
            "type": "string",
            "format": "datetime"
          },
          "name": {
            "type": "string"
          },
          "nextSchedule": {
            "type": "string",
            "format": "datetime"
          },
          "EndpointID": {
            "type": "string",
            "format": "uuid"
          },
          "regularity": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "executionStatus": {
            "type": "string"
          },
          "scheduleType": {
            "type": "string"
          },
          "TemplateType": {
            "type": "string"
          },
          "triggeredBy": {
            "type": "string",
            "description": "optional"
          },
          "TemplateID": {
            "type": "string",
            "format": "uuid"
          },
          "taskInstanceID": {
            "type": "string",
            "format": "uuid"
          }
        }
      },
      "InstanceSummaryResult": {
        "type": "object",
        "description": "Task Instance Summary Results",
        "properties": {
          "Results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstanceSummary"
            }
          },
          "Count": {
            "type": "integer",
            "description": "Number of Results Returned"
          }
        }
      },
      "InstanceSummary": {
        "type": "object",
        "description": "Instance Summary result returned from the Tasking",
        "properties": {
          "TaskID": {
            "type": "string",
            "format": "timeuuid"
          },
          "Id": {
            "type": "string",
            "format": "timeuuid"
          },
          "CreatedOn": {
            "type": "string",
            "format": "datetime"
          },
          "Name": {
            "type": "string"
          },
          "OverallStatus": {
            "type": "string"
          },
          "Regularity": {
            "type": "string"
          },
          "NextSchedule": {
            "type": "string",
            "format": "datetime"
          },
          "ExecutedOn": {
            "type": "string",
            "format": "datetime"
          },
          "DeviceCount": {
            "type": "integer"
          },
          "SuccessCount": {
            "type": "integer"
          },
          "FailedCount": {
            "type": "integer"
          },
          "PostponedCount": {
            "type": "integer"
          },
          "DisabledCount": {
            "type": "integer"
          },
          "CanceledCount": {
            "type": "integer"
          },
          "ScheduledCount": {
            "type": "integer"
          },
          "WaitingCount": {
            "type": "integer"
          },
          "RunningCount": {
            "type": "integer"
          }
        }
      },
      "TaskExecutionResultResult": {
        "type": "object",
        "description": "Task Execution Results",
        "properties": {
          "Result": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TaskExecutionResult"
            }
          },
          "Count": {
            "type": "integer",
            "description": "Number of Results Returned"
          }
        }
      },
      "TaskExecutionResult": {
        "type": "object",
        "description": "Instance Summary result returned from the Tasking",
        "properties": {
          "endpointId": {
            "type": "string",
            "format": "uuid"
          },
          "completionStatus": {
            "type": "string"
          },
          "errorDetails": {
            "type": "string"
          },
          "resultDetails": {
            "type": "string"
          },
          "executiontime": {
            "type": "string"
          },
          "createdOn": {
            "type": "string"
          },
          "taskId": {
            "type": "string"
          },
          "taskInstanceId": {
            "type": "string",
            "format": "timeuuid"
          }
        }
      },
      "SystemStateCollection": {
        "type": "object",
        "properties": {
          "createTimeUTC": {
            "type": "string",
            "format": "date-time",
            "description": "CreateTimeUTC of agent"
          },
          "name": {
            "type": "string",
            "description": "Name"
          },
          "type": {
            "type": "string",
            "description": "Collection of all systemstate information"
          },
          "endpointID": {
            "type": "string",
            "format": "uuid",
            "description": "Endpoint ID of the managed endpoint resource"
          },
          "clientID": {
            "type": "string",
            "description": "Client ID or company"
          },
          "siteID": {
            "type": "string",
            "description": "Site ID"
          },
          "startupStatus": {
            "$ref": "#/components/schemas/SystemStateStartupStatus"
          },
          "lastLoggedOnUser": {
            "$ref": "#/components/schemas/SystemStateLastLoggedOnUser"
          },
          "loggedOnUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SystemStateLoggedOnUsers"
            },
            "description": "Logged on users information"
          }
        }
      },
      "SystemStateStartupStatus": {
        "type": "object",
        "properties": {
          "lastBootUpTimeUTC": {
            "type": "string",
            "format": "date-time",
            "description": "Last bootup time of operating system"
          }
        }
      },
      "SystemStateLastLoggedOnUser": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "User name of lastLoggedOnUser"
          },
          "logonTime": {
            "type": "string",
            "format": "date-time",
            "description": "Logon time of lastLoggedOnUser"
          },
          "status": {
            "type": "string",
            "description": "Status of a lastLoggedOnUser"
          },
          "isAdmin": {
            "type": "boolean",
            "description": "lastLoggedOnUser is admin or not"
          }
        }
      },
      "SystemStateLoggedOnUsers": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "User name"
          },
          "isAdmin": {
            "type": "boolean",
            "description": "loggedOnUsers is admin or not"
          },
          "sessionID": {
            "type": "string",
            "description": "Session Id of a logon user"
          },
          "sessionName": {
            "type": "string",
            "description": "Session name of a logon user"
          },
          "status": {
            "type": "string",
            "description": "Status of a logon user"
          },
          "client": {
            "type": "string",
            "description": "Client name or ip address for remote logon"
          },
          "logonTime": {
            "type": "string",
            "format": "date-time",
            "description": "Logon time of loggedOn User"
          }
        }
      }
    },
    "securitySchemes": {
      "device_groups": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://openapi.service.itsupport247.net/v1/token",
            "scopes": {
              "platform.deviceGroups.read": "read all automations"
            }
          }
        }
      },
      "automation_read": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://openapi.service.itsupport247.net/v1/token",
            "scopes": {
              "platform.automation.read": "read all automations"
            }
          }
        }
      },
      "openapi_oauth": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://openapi.service.itsupport247.net/v1/token",
            "scopes": {}
          }
        }
      },
      "topology": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://openapi.service.itsupport247.net/v1/token",
            "scopes": {
              "topology": "read topology"
            }
          }
        }
      },
      "asset": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://openapi.service.itsupport247.net/v1/token",
            "scopes": {
              "asset:all": "read all assets of the endpoint",
              "asset:baseboard": "read baseboard assets of the endpoint",
              "asset:bios": "read bios assets of the endpoint",
              "asset:drives": "read drives assets of the endpoint",
              "asset:networks": "read networks assets of the endpoint",
              "asset:os": "read os assets of the endpoint",
              "asset:system": "read system assets of the endpoint",
              "asset:software": "read software assets of the endpoint",
              "asset:users": "read users assets of the endpoint",
              "asset:services": "read services assets of the endpoint",
              "asset:shares": "read shares assets of the endpoint"
            }
          }
        }
      },
      "extended_attributes": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://openapi.service.itsupport247.net/v1/token",
            "scopes": {
              "extended_attributes": "extended attributes management"
            }
          }
        }
      },
      "alerts": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://openapi.service.itsupport247.net/v1/token",
            "scopes": {
              "alerts": "alerts management"
            }
          }
        }
      },
      "site_mapping": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://openapi.service.itsupport247.net/v1/token",
            "scopes": {
              "site_mapping": "read site mappings"
            }
          }
        }
      },
      "endpoint_mapping": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://openapi.service.itsupport247.net/v1/token",
            "scopes": {
              "endpoint_mapping": "endpoint mapping management"
            }
          }
        }
      },
      "network_and_monitoring": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://openapi.service.itsupport247.net/v1/token",
            "scopes": {
              "network_and_monitoring": "network monitoring management"
            }
          }
        }
      },
      "platform": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://openapi.service.itsupport247.net/v1/token",
            "scopes": {
              "platform.companies.read": "read all companies",
              "platform.sites.read": "read all sites",
              "platform.sites.write": "write all sites"
            }
          }
        }
      },
      "backupdashboard": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://openapi.service.itsupport247.net/v1/token",
            "scopes": {
              "backupdashboard:create": "create backupdashboard"
            }
          }
        }
      },
      "endpoints_list": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://openapi.service.itsupport247.net/v1/token",
            "scopes": {
              "platform.asset.read": "read all devices"
            }
          }
        }
      },
      "custom_fields": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://openapi.service.itsupport247.net/v1/token",
            "scopes": {
              "platform.custom_fields_definitions.read": "View Custom Fields Definitions",
              "platform.custom_fields_definitions.write": "Update Custom Fields Definitions",
              "platform.custom_fields_values.read": "View Custom Fields Values",
              "platform.custom_fields_values.write": "Update Custom Fields Values"
            }
          }
        }
      },
      "automation_create": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://openapi.service.itsupport247.net/v1/token",
            "scopes": {
              "platform.automation.create": "create automations"
            }
          }
        }
      },
      "devices_read": {
        "type": "oauth2",
        "flows": {
          "clientCredentials": {
            "tokenUrl": "https://openapi.service.itsupport247.net/v1/token",
            "scopes": {
              "platform.devices.read": "read all systemstates"
            }
          }
        }
      }
    },
    "requestBodies": {
      "PartnerAttributeDefinitionPOST": {
        "description": "Schema for creating a new partner attribute definition",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PartnerAttributeDefinition"
            }
          }
        }
      },
      "PartnerAttributeDefinitionPUT": {
        "description": "Schema for updating a partner attribute definition",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/PartnerAttributeDefinition"
            }
          }
        }
      },
      "PartnerAttributeValuesPUT": {
        "description": "Schema for updating partner attribute values",
        "required": true,
        "content": {
          "application/json": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/AttributeValue"
              }
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Authorization"
    },
    {
      "name": "Rate Limits"
    },
    {
      "name": "Devices"
    },
    {
      "name": "Tickets"
    },
    {
      "name": "Custom Fields Values"
    },
    {
      "name": "Custom Fields Definitions"
    }
  ]
}